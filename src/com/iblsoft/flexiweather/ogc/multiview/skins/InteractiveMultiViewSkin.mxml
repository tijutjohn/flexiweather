<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark SkinnableDataContainer container.

	 @see spark.components.SkinnableDataContainer

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:layouts="com.iblsoft.flexiweather.ogc.multiview.layouts.*"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009">
	
	<fx:Metadata>[HostComponent("com.iblsoft.flexiweather.ogc.multiview.InteractiveMultiView")]</fx:Metadata>

	<fx:Declarations>
		<s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="700"/>
		<s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="700"/>
	</fx:Declarations>
	<fx:Script fb:purpose="styling">

		<![CDATA[
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth: Number, unscaledHeight: Number): void
			{
				if (getStyle("borderVisible") == false)
				{
					if (border)
						border.visible = false;
//					if (background)
//					{
//						background.left = background.top = background.right = background.bottom = 0;
//					}
//					if (scroller)
//						scroller.minViewportInset = 0;
				}
				else
				{
					if (border)
						border.visible = true;
//					if (background)
//					{
//						background.left = background.top = background.right = background.bottom = 1;
//					}
//					if (scroller)
//						scroller.minViewportInset = 1;
				}
				if (borderStroke)
				{
					borderStroke.color = getStyle("borderColor");
					borderStroke.alpha = getStyle("borderAlpha");
				}
				if (selectedBorderStroke)
				{
					selectedBorder.left = hostComponent.selectionL;
					selectedBorder.top = hostComponent.selectionT;
					selectedBorder.right = hostComponent.selectionR;
					selectedBorder.bottom = hostComponent.selectionB;
					selectedBorderStroke.color = getStyle("selectedBorderColor");
					selectedBorderStroke.alpha = getStyle("selectedBorderAlpha");
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>

	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0">
		<s:stroke>

			<!--- border stroke @private -->
			<s:SolidColorStroke id="borderStroke" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	

	<!--
	  Note: setting the minimum size to 0 here so that changes to the host component's
	  size will not be thwarted by this skin part's minimum size.   This is a compromise,
	  more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
	-->

	<!--- @copy spark.components.SkinnableDataContainer#dataGroup -->
	<s:DataGroup id="dataGroup" left="1" right="1" top="1" bottom="1" minWidth="0" minHeight="0">
		<s:layout>
			<layouts:MultiViewLayout/>
		</s:layout>
	</s:DataGroup>

	<!--- @private -->
	<s:Rect id="selectedBorder">
		<s:stroke>

			<!--- border stroke @private -->
			<s:SolidColorStroke id="selectedBorderStroke" weight="3"/>
		</s:stroke>
	</s:Rect>
	
	<s:Group id="disabledUI" showEffect="{fadeIn}" hideEffect="{fadeOut}">
		<s:Rect left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:SolidColor color="0x000000" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		
	</s:Group>
	
</s:Skin>
