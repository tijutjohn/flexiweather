<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
                creationComplete="onCreationComplete(event)">

    <fx:Script>
        <![CDATA[
            import com.iblsoft.flexiweather.ogc.BBox;
            import com.iblsoft.flexiweather.ogc.Version;
            import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
            import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
            import com.iblsoft.flexiweather.ogc.managers.OGCServiceConfigurationManager;
            import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
            import com.iblsoft.flexiweather.proj.Projection;
            import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
            import com.iblsoft.flexiweather.widgets.InteractiveLayer;
            import com.iblsoft.flexiweather.widgets.InteractiveLayerMap;
            import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;

            private var serviceRIA:WMSServiceConfiguration;

            private var layerRelief:InteractiveLayerWMSWithQTT;
            private var layerContrast:InteractiveLayerWMSWithQTT;

            private var currentLayer:InteractiveLayer;
            private var currentSelectedButton:ToggleButton;

            private function onCreationComplete(event:Event):void {
                //initInteractiveLayerMap();
                initJobLoader();
                initServiceConfig();
                initProjectionDefinitions();
                initBaseLayers();
                initSelectedLayer();
            }

            private function initInteractiveLayerMap():void {
                var interactiveLayerMap:InteractiveLayerMap = new InteractiveLayerMap(map);
                map.addLayer(interactiveLayerMap);
            }

            private function initJobLoader():void {
                if (Capabilities.playerType == "Desktop") {
                    BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(labelProgress);
                } else {
                    BackgroundJobManager.getInstance().createDefaultPreloader();
                    BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
                }
            }

            private function initServiceConfig():void {
                var serverUrl:String = 'http://ogcie.iblsoft.com';
                var serviceConfigManager:OGCServiceConfigurationManager = OGCServiceConfigurationManager.getInstance();
                serviceRIA = serviceConfigManager.getService("ria", serverUrl + "/ria", new Version(1, 3, 0), WMSServiceConfiguration) as WMSServiceConfiguration;
                serviceConfigManager.update(serviceConfigManager.getAllServicesNames());
            }

            private function initProjectionDefinitions():void {
                Projection.addCRSByProj4("EPSG:4326",
                        "+title=WGS 84 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
                        new BBox(-180, -90, 180, 90), true);
            }

            private function initBaseLayers():void {
                var reliefConfig:WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(serviceRIA, ["background-dem"], 256);
                reliefConfig.avoidTiling = true;
                reliefConfig.label = "Background";
                layerRelief = new InteractiveLayerWMSWithQTT(map, reliefConfig);

                var contrastConfig:WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(serviceRIA, ["background-dem"], 256);
                contrastConfig.avoidTiling = true;
                contrastConfig.label = "Background";
                layerContrast = new InteractiveLayerWMSWithQTT(map, contrastConfig);
                layerContrast.setWMSStyleName(0, "dark-colours")
            }

            private function initSelectedLayer():void {
                currentSelectedButton = reliefMapToggle;
                currentLayer = layerRelief;
                map.addLayer(layerRelief);
            }

            private function onMouseClick(event:MouseEvent):void {
                var clickedButton:ToggleButton = event.target as ToggleButton;
                switch (clickedButton.id) {
                    case reliefMapToggle.id : toggleLayer(reliefMapToggle, layerRelief);
                                              break;
                    case grayScaleToggle.id : toggleLayer(grayScaleToggle, layerContrast);
                                              break;
                    default: throw new Error("This can't happen");
                }
            }

            private function toggleLayer(button:ToggleButton, baseLayer:InteractiveLayer):void {
                switchButtonSelection(button);
                switchBaseLayer(baseLayer);
            }

            private function switchButtonSelection(toggleButton:ToggleButton):void {
                if (toggleButton.id != currentSelectedButton.id) {
                    currentSelectedButton = toggleButton;
                    for (var i:int = 0; i < buttons.numElements; i++) {
                        var button:ToggleButton = buttons.getElementAt(i) as ToggleButton;
                        if (button.id != currentSelectedButton.id) {
                            button.selected = false;
                        }
                    }
                } else {
                    toggleButton.selected = true;
                }
            }

            private function switchBaseLayer(baseLayer:InteractiveLayer):void {
                if(baseLayer != currentLayer) {
                    map.removeLayer(currentLayer);
                    map.addLayer(baseLayer);
                    currentLayer = baseLayer;
                }
            }

        ]]>
    </fx:Script>

    <widgets:InteractiveWidget id="map" width="100%" height="100%">
        <widgets:InteractiveLayerZoom id="layerZoom" zOrder="1"/>
        <widgets:InteractiveLayerPan id="layerPan" zOrder="2"/>
    </widgets:InteractiveWidget>

    <s:HGroup id="hboxCaption" width="100%" verticalAlign="middle">

        <s:Label id="labelProgress" textAlign="right" fontWeight="bold"/>

        <s:HGroup id="buttons">
            <s:ToggleButton id="reliefMapToggle" label="Relief Map" click="onMouseClick(event);" selected="true"/>
            <s:ToggleButton id="grayScaleToggle" label="Grayscale Map" click="onMouseClick(event);"/>
        </s:HGroup>

    </s:HGroup>

</s:Application>
