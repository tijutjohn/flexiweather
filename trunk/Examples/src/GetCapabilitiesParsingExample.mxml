<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
			   xmlns="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%">
			<s:Button label="Update all services" click="updateAll()"/>
			<s:Button label="Just Pars GC XML" click="parseGCXML()"/>
			<s:CheckBox label="Parse GetCapabilities" change="updateParseGetCapabilities((event.target as CheckBox).selected)"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Button label="Populate GFS GetCapabilities with Dimensions Inheritance" click="popuplateGFSGetCapabilities()"/>
			<s:Button label="Populate AFWA GetCapabilities" click="popuplateAFWAGetCapabilities()"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Button label="Add Background Layer" click="addNewLayer('dem')"/>
			<s:Button label="Add Temperature Layer" click="addNewLayer('temperature')"/>
			<s:Button label="Add AFWA Temperature Layer" click="addNewLayer('afwa-temperature')"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Button label="Get RUNs" click="getDimension('RUN')"/>
			<s:Button label="Get FORECASTs" click="getDimension('FORECAST')"/>
			<s:Button label="Get LEVELs" click="getDimension('LEVEL')"/>
		</s:HGroup>
		<widgets:InteractiveWidget id="m_iw" width="100%" height="100%">
			<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1" enabled="true" minimimMapScale="100000"/>
			<widgets:InteractiveLayerPan id="m_ilp" zOrder="2" enabled="true"/>
		</widgets:InteractiveWidget>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.ogc.InteractiveLayerMSBase;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.WMSDimension;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.events.ServiceCapabilitiesEvent;
			
			import flash.utils.getTimer;
			
			import mx.events.FlexEvent;
			
			[Embed (source="/assets/afwaCapabilities.xml", mimeType="application/octet-stream")]
			public var afwaGCClass: Class;
			[Embed (source="/assets/gfs.xml", mimeType="application/octet-stream")]
			public var gfsXMLClass: Class;
			
			public var gfsXML:XML;
			public var afwaXML:XML;
			
			override protected function onCreationComplete(event:FlexEvent):void
			{
				
				super.onCreationComplete(event);
				
				
				var byteArray1:ByteArray = new afwaGCClass() as ByteArray;
				afwaXML = new XML(byteArray1.readUTFBytes(byteArray1.length));
				
				var byteArray2:ByteArray = new gfsXMLClass() as ByteArray;
				gfsXML = new XML(byteArray2.readUTFBytes(byteArray2.length));
				
				WMSServiceConfiguration.EXPERIMENTAL_LAYERS_INITIALIZING = true;
				WMSServiceConfiguration.PARSE_GET_CAPABILITIES = false;
				WMSServiceConfiguration.USE_ASYNCHRONOUS_PARSING = false;
				
//				getAllServicesCapabilities();
			}
			
			private function popuplateGFSGetCapabilities(): void
			{
				var time: Number = getTimer();
				serviceGFS.populateGetCapabilities(gfsXML);
				trace("popuplateGFSGetCapabilities: " + (getTimer() - time)+"ms");
			}
			private function popuplateAFWAGetCapabilities(): void
			{
				var time: Number = getTimer();
				serviceAFWA.populateGetCapabilities(afwaXML);
				trace("popuplateAFWAGetCapabilities: " + (getTimer() - time)+"ms");
			}
			
			private function updateParseGetCapabilities(parse: Boolean): void
			{
				WMSServiceConfiguration.PARSE_GET_CAPABILITIES = parse;
			}
			
			private function parseGCXML(): void
			{
				serviceAFWA.populateGetCapabilities(serviceAFWA.xml);
			}
			
			private function updateAll(): void
			{
				getAllServicesCapabilities();
			}
			
//			override protected function onCapabilitiesLoaded(event: ServiceCapabilitiesEvent):void
//			{
//				var xml: XML = event.xml;
//				
//				var s_version: String = xml.@version;
//				var version: Version = Version.fromString(s_version);
//				var wms: Namespace = version.isLessThan(1, 3, 0)
//					? new Namespace() : new Namespace("http://www.opengis.net/wms");
//				var capability: XML = xml.wms::Capability[0];
//				
//				if (capability)
//				{
//					var layerXML: XML = capability.wms::Layer[0];
//					if (layerXML && event.service is WMSServiceConfiguration)
//					{
//						(event.service as WMSServiceConfiguration).populateLayerCapabilities(layerXML);
//					}
//				}
//			}/
//			override protected function onCapabilitiesUpdated(event:ServiceCapabilitiesEvent):void
//			{
//				super.onCapabilitiesUpdated(event);
//			}
			
			private function getDimension(dim: String): void
			{
				var tempLayer: InteractiveLayerMSBase;
				
				var numLayers: int = m_iw.interactiveLayerMap.layers.length;
				for (var i: int = 0; i < numLayers; i++)
				{
					var layer: InteractiveLayerMSBase = m_iw.interactiveLayerMap.layers.getItemAt(i) as InteractiveLayerMSBase;
					if (layer.name == 'Temperature')
					{
						tempLayer = layer;
						break;
					}
				}
				if (tempLayer)
				{
					var dimNames: Array = tempLayer.getWMSDimensionsNames();
					for each (var dimName: String in dimNames)
					{
						if (dimName == dim)
						{
							var dimValues: Array = tempLayer.getWMSDimensionsValues(dimName);
							trace("Dimension : " + dimName + " values: " + dimValues.length);
						}
					}
				}
			}
			private function addNewLayer(type: String): void
			{
				addLayer(type);
			}
		]]>
	</fx:Script>
</FlexiWeatherTemplate>
