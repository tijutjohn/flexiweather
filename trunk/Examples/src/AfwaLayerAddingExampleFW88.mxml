<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
                      xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
                      xmlns="*">
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <s:VGroup width="100%" height="100%">
        <!--<s:HGroup width="100%">
            <s:Button label="Add Temperature Layer" click="addTemperatureLayer()"/>
        </s:HGroup>-->
        <s:HGroup width="100%">
            <s:Button label="Get RUNs" click="getDimension('RUN')"/>
            <s:Button label="Get FORECASTs" click="getDimension('FORECAST')"/>
            <s:Button label="Get LEVELs" click="getDimension('LEVEL')"/>
        </s:HGroup>
        <widgets:InteractiveWidget id="m_iw" width="100%" height="100%">
            <widgets:InteractiveLayerZoom id="m_ilz" zOrder="1" enabled="true" minimimMapScale="100000"/>
            <widgets:InteractiveLayerPan id="m_ilp" zOrder="2" enabled="true"/>
        </widgets:InteractiveWidget>
    </s:VGroup>

    <fx:Script>
		<![CDATA[
        import com.iblsoft.flexiweather.FlexiWeatherConfiguration;
        import com.iblsoft.flexiweather.ogc.InteractiveLayerMSBase;
        import com.iblsoft.flexiweather.ogc.Version;
        import com.iblsoft.flexiweather.ogc.WMSDimension;
        import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
        import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
        import com.iblsoft.flexiweather.ogc.events.ServiceCapabilitiesEvent;
        import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;

        import mx.events.FlexEvent;

        [Embed (source="/assets/TemperatureGCXMLNode.xml", mimeType="application/octet-stream")]
        public var temperatureLayerXMLClass: Class;

        [Embed (source="/assets/ThicknessGCXMLNode.xml", mimeType="application/octet-stream")]
        public var thicknessLayerXMLClass: Class;

        [Embed (source="/assets/RelHumGCXMLNode.xml", mimeType="application/octet-stream")]
        public var relHumLayerXMLClass: Class;

        [Embed (source="/assets/WindGCXMLNode.xml", mimeType="application/octet-stream")]
        public var windLayerXMLClass: Class;

        override protected function onCreationComplete(event:FlexEvent):void
        {
            FlexiWeatherConfiguration.FLEXI_WEATHER_LOADS_GET_CAPABILITIES = false;

            super.onCreationComplete(event);

            addTemperatureLayer();
            addRelHumLayer();
            addThicknessLayer();
        }

        private function addTemperatureLayer():void {
            var srv: WMSServiceConfiguration = getWMSLayerConfiguration('gfs');
            var tileSize: uint = 256;

            var byteArray:ByteArray = new temperatureLayerXMLClass() as ByteArray;
            var temperatureLayerNode:XML = new XML(byteArray.readUTFBytes(byteArray.length));

            var tempLc: WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(srv, ["temperature"], tileSize);
            tempLc.avoidTiling = false;
            tempLc.label = "Temperature";
            tempLc.dimensionRunName = 'RUN';
            tempLc.dimensionForecastName = 'FORECAST';
            tempLc.populateLayerCapabilities(temperatureLayerNode);

            var tempLayer:InteractiveLayerWMSWithQTT = new InteractiveLayerWMSWithQTT(m_iw, tempLc);
            tempLayer.name = 'Temperature';
            tempLayer.alpha = .5;

            m_iw.addLayer(tempLayer);
        }

        private function addRelHumLayer():void {
            var srv: WMSServiceConfiguration = getWMSLayerConfiguration('gfs');
            var tileSize: uint = 256;

            var byteArray:ByteArray = new relHumLayerXMLClass() as ByteArray;
            var relHumLayerNode:XML = new XML(byteArray.readUTFBytes(byteArray.length));

            var relHumLc:WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(srv, ["relative-humidity"], tileSize);
            relHumLc.avoidTiling = false;
            relHumLc.label = "relative-humidity";
            relHumLc.dimensionRunName = 'RUN';
            relHumLc.dimensionForecastName = 'FORECAST';
            relHumLc.populateLayerCapabilities(relHumLayerNode);


            var relHumLayer:InteractiveLayerWMSWithQTT = new InteractiveLayerWMSWithQTT(m_iw, relHumLc);
            relHumLayer.name = 'relative-humidity';

            m_iw.addLayer(relHumLayer);
        }

        private function addThicknessLayer():void {
            var srv: WMSServiceConfiguration = getWMSLayerConfiguration('gfs');
            var tileSize: uint = 256;

            var byteArray:ByteArray = new thicknessLayerXMLClass() as ByteArray;
            var thicknessLayerNode:XML = new XML(byteArray.readUTFBytes(byteArray.length));

            var thicknessLc:WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(srv, ["thickness"], tileSize);
            thicknessLc.avoidTiling = false;
            thicknessLc.label = "thickness";
            thicknessLc.dimensionRunName = 'RUN';
            thicknessLc.dimensionForecastName = 'FORECAST';
            thicknessLc.populateLayerCapabilities(thicknessLayerNode);


            var thickLayer:InteractiveLayerWMSWithQTT = new InteractiveLayerWMSWithQTT(m_iw, thicknessLc);
            thickLayer.name = 'thickness';

            m_iw.addLayer(thickLayer);
        }


        private function getDimension(dim: String): void
        {
            var tempLayer: InteractiveLayerMSBase;

            var numLayers: int = m_iw.interactiveLayerMap.layers.length;
            for (var i: int = 0; i < numLayers; i++)
            {
                var layer: InteractiveLayerMSBase = m_iw.interactiveLayerMap.layers.getItemAt(i) as InteractiveLayerMSBase;
                if (layer.name == 'Temperature')
                {
                    tempLayer = layer;
                    break;
                }
            }
            if (tempLayer)
            {
                var dimNames: Array = tempLayer.getWMSDimensionsNames();
                for each (var dimName: String in dimNames)
                {
                    if (dimName == dim)
                    {
                        var dimValues: Array = tempLayer.getWMSDimensionsValues(dimName);
                        trace("Dimension : " + dimName + " values: " + dimValues.length);
                    }
                }
            }
        }
        ]]>
	</fx:Script>
</FlexiWeatherTemplate>
