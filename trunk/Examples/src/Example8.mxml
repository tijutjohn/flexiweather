<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:widgets="com.iblsoft.flexiweather.widgets.*" 
		xmlns="*" minWidth="955"
		minHeight="600" frameRate="30" backgroundColor="0x888888"
		skinClass="spark.skins.spark.ApplicationSkin">
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Style source="css/fonts.css"/>
	<fx:Style source="css/kml.css"/>
	
	<s:VGroup width="100%" height="100%" gap="2" paddingTop="10" paddingBottom="10"
			paddingLeft="10" paddingRight="10">
		<s:HGroup id="hboxCaption" width="100%" verticalAlign="middle">
			<s:Label text="This example demonstrates displaying KML files in InteractiveWidget."
					fontWeight="bold" fontSize="14" color="0xffffff"/>
			<s:Label id="labelProgress" textAlign="right" fontWeight="bold"/>
		</s:HGroup>
		<s:BorderContainer backgroundColor="0xaaaaaa" borderColor="0xcccccc" width="100%"
				minHeight="0">
			<s:HGroup id="hboxMenu" width="100%" verticalAlign="middle" paddingBottom="5"
					paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Change projection"/>
				<s:ToggleButton label="LatLon CRS:84" selected="{m_iw.crs == 'CRS:84'}"
						click="m_iw.setCRSExtentAndViewBBox('CRS:84');"/>
				<s:ToggleButton label="North Polar Stereo" selected="{m_iw.crs == 'ESRI:102018'}"
						click="m_iw.setCRS('ESRI:102018', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
				<s:ToggleButton label="South Polar Stereo" selected="{m_iw.crs == 'ESRI:102021'}"
						click="m_iw.setCRS('ESRI:102021', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
				<s:ToggleButton label="Google Maps" selected="{m_iw.crs == 'EPSG:900913'}"
						click="m_iw.setCRSExtentAndViewBBox('EPSG:900913');"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:BorderContainer backgroundColor="0x999999" borderColor="0xbbbbbb" width="100%"
				minHeight="0">
			<s:HGroup width="100%" verticalAlign="middle" paddingBottom="5" paddingLeft="5"
					paddingRight="5" paddingTop="5">
				<s:Label text="Choose from KML files"/>
				<s:DropDownList width="250" dataProvider="{kmlFiles}"
						change="showOrHideKMLLayer((event.target as DropDownList).selectedItem as String)"/>
				<s:Label text="or KMZ files:"/>
				<s:DropDownList width="250" dataProvider="{kmzFiles}"
						change="showOrHideKMLLayer((event.target as DropDownList).selectedItem as String)"/>
				<s:Label text="or browse KML or KMZ files from your PC"/>
				<s:Button label="Browse for KML file" click="browseForKMLFile()"/>
				<s:Label text="or copy or write your own KML "/>
				<s:Button label="Create KML from source" click="showPopupForDynamicKML()"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label 
					text="Please note, there is problem to load KML/KMZ assets with relative path. In Web browser there is no possibility to find out whole path of file, which was selected from dialog."
					fontSize="10"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">

			<!--s:Button label="Debug KMLResourceManager" click="debugKRM()"/-->

			<!--s:Button label="Show viewBBox" click="trace(m_iw.getViewBBox().toBBOXString())"/-->
			<s:Label text="Anticollision objects {anticollisionObjectsLength}"/>
		</s:HGroup>
		<s:HGroup width="100%" height="100%">
			<s:BorderContainer backgroundColor="0x999999" borderColor="0xbbbbbb" height="100%"
					minHeight="0">
				<s:VGroup width="250" height="100%" paddingBottom="5" paddingLeft="5"
						paddingRight="5" paddingTop="5">
					<s:Label text="Opened KMLs" fontWeight="bold"/>
					<s:List id="lstOpenedDocuments" dataProvider="{openedDocuments}" width="100%"
							itemRenderer="com.iblsoft.view.itemrenderers.KMLFileListItemRenderer"
							change="changeKML((event.target as List).selectedItem.path as String)"/>
					<s:Label text="KML Structure" fontWeight="bold"/>

					<!--mx:Tree height="100%" width="100%" dataProvider="{kmlDataProvider}" itemClick="onKMLTreeItemClick(event);"
							 itemRenderer="com.iblsoft.view.itemrenderers.KMLTreeItemRenderer"/-->
				</s:VGroup>
			</s:BorderContainer>
			<widgets:InteractiveWidget id="m_iw" width="100%" height="100%"
					anticollisionUpdated="anticollisionUpdateCount++">
				<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1"/>
				<widgets:InteractiveLayerPan id="m_ilp" zOrder="2" startPanning="startPanning()"
						stopPanning="stopPanning()"/>
			</widgets:InteractiveWidget>
		</s:HGroup>
	</s:VGroup>
	<mx:UIComponent id="dConsoleParent" width="100%" height="100%"/>
	
	<fx:Script>
		<![CDATA[
			import com.furusystems.dconsole2.DConsole;
			import com.furusystems.dconsole2.IConsole;
			import com.furusystems.dconsole2.core.gui.maindisplay.ConsoleView;
			import com.iblsoft.flexiweather.net.loaders.AbstractURLLoader;
			import com.iblsoft.flexiweather.net.loaders.KMLLoader;
			import com.iblsoft.flexiweather.ogc.BBox;
			import com.iblsoft.flexiweather.ogc.CRSWithBBox;
			import com.iblsoft.flexiweather.ogc.FeatureBase;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerQTTMS;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerWMS;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.kml.InteractiveLayerKML;
			import com.iblsoft.flexiweather.ogc.kml.configuration.KMLLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.kml.controls.KMLBitmapLoader;
			import com.iblsoft.flexiweather.ogc.kml.controls.KMLLabel;
			import com.iblsoft.flexiweather.ogc.kml.data.KMLLoaderObject;
			import com.iblsoft.flexiweather.ogc.kml.data.KMLType;
			import com.iblsoft.flexiweather.ogc.kml.data.KMZFile;
			import com.iblsoft.flexiweather.ogc.kml.events.KMLEvent;
			import com.iblsoft.flexiweather.ogc.kml.events.KMLFeatureEvent;
			import com.iblsoft.flexiweather.ogc.kml.events.KMLParsingStatusEvent;
			import com.iblsoft.flexiweather.ogc.kml.features.GroundOverlay;
			import com.iblsoft.flexiweather.ogc.kml.features.KML;
			import com.iblsoft.flexiweather.ogc.kml.features.KMLFeature;
			import com.iblsoft.flexiweather.ogc.kml.features.KmlObject;
			import com.iblsoft.flexiweather.ogc.kml.features.LatLonBox;
			import com.iblsoft.flexiweather.ogc.kml.features.MultiGeometry;
			import com.iblsoft.flexiweather.ogc.kml.features.Placemark;
			import com.iblsoft.flexiweather.ogc.kml.features.Point;
			import com.iblsoft.flexiweather.ogc.kml.managers.KMLLoaderManager;
			import com.iblsoft.flexiweather.ogc.kml.managers.KMLPopupManager;
			import com.iblsoft.flexiweather.ogc.kml.managers.KMLResourceManager;
			import com.iblsoft.flexiweather.ogc.kml.renderer.DefaultKMLRenderer;
			import com.iblsoft.flexiweather.ogc.managers.OGCServiceConfigurationManager;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
			import com.iblsoft.flexiweather.ogc.tiling.TiledTilesProvider;
			import com.iblsoft.flexiweather.plugins.IConsole;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.proj.Projection;
			import com.iblsoft.flexiweather.utils.DebugUtils;
			import com.iblsoft.flexiweather.utils.anticollision.AnticollisionLayout;
			import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
			import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;
			import com.iblsoft.utils.CustomDebugConsole;
			import com.iblsoft.utils.Stats;
			import com.iblsoft.view.itemrenderers.KMLFileListItemRenderer;
			import com.iblsoft.view.popups.DynamicKMLPopup;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Image;
			private var m_openStreetLayer: InteractiveLayerQTTMS;
			[Bindable]
			public var openedDocuments: ArrayCollection;
			[Bindable]
			public var kmlFiles: ArrayCollection;
			[Bindable]
			public var kmzFiles: ArrayCollection;
			[Bindable]
			public var anticollisionUpdateCount: int = 0;
			[Bindable]
			public var anticollisionObjectsLength: int = 0;
			[Bindable]
			public var kmlDataProvider: ArrayCollection;
			public var displayedKmlURL: String;
			private var _kmlLoaderManager: KMLLoaderManager;

			override protected function onCreationComplete(event: FlexEvent): void
			{
				super.onCreationComplete(event);
				
				WMSServiceConfiguration.PARSE_GET_CAPABILITIES = true;
				Projection.AVOID_HORIZONTAL_WRAPPING = false;
				
				if (Capabilities.playerType == "Desktop")
					BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(labelProgress);
				else
				{
					BackgroundJobManager.getInstance().createDefaultPreloader();
					BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
				}
				//change font of KML labels
				//we do not support any font (need to be embedded)
				KMLLabel.labelFont = 'defaultFontMX';
				_kmlLoaderManager = new KMLLoaderManager();
				_kmlLoaderManager.addEventListener(KMLEvent.UNPACKING_STARTED, onKMZUnpackingStarted);
				_kmlLoaderManager.addEventListener(KMLEvent.UNPACKING_PROGRESS, onKMZUnpackingProgress);
				_kmlLoaderManager.addEventListener(KMLEvent.UNPACKING_FINISHED, onKMZUnpackingFinished);
				_kmlLoaderManager.addEventListener(KMLEvent.PARSING_STARTED, onKMLParsingStarted);
				_kmlLoaderManager.addEventListener(KMLEvent.PARSING_PROGRESS, onKMLParsingProgress);
				_kmlLoaderManager.addEventListener(KMLEvent.PARSING_FINISHED, onKMLParsingFinished);
				_kmlLoaderManager.addEventListener(KMLEvent.KML_FILE_LOADED, onKMLFileLoaded);
				_kmlLoaderManager.addEventListener(KMLEvent.KMZ_FILE_LOADED, onKMZFileLoaded);
				
				_kmlLoaderManager.addEventListener(KMLParsingStatusEvent.PARSING_FAILED, onKMLParsingStatus);
				_kmlLoaderManager.addEventListener(KMLParsingStatusEvent.PARSING_PARTIALLY_SUCCESFULL, onKMLParsingStatus);
				_kmlLoaderManager.addEventListener(KMLParsingStatusEvent.PARSING_SUCCESFULL, onKMLParsingStatus);
				
				openedDocuments = new ArrayCollection();
				kmlFiles = new ArrayCollection(String("assets/kml/placemark.kml,assets/kml/time-stamp-point.kml,assets/kml/balloon-image-rel.kml,assets/kml/usa-ca-sf.kml,assets/kml/continents.kml").split(","));
//				kmzFiles = new ArrayCollection(String("assets/kml/time-stamp-point.kml,assets/kml/balloon-image-rel.kml,assets/kml/usa-ca-sf.kml,assets/kml/continents.kml").split(","));
//				kmlFiles = new ArrayCollection(String("assets/kml/placemark.kml,assets/kml/balloon-image-rel.kml,assets/kml/usa-ca-sf.kml,assets/kml/continents.kml").split(","));
				kmzFiles = new ArrayCollection(String("assets/kmz/balloon-image-rel.kmz,assets/kmz/usa-ca-sf.kmz,assets/kmz/continents.kmz,assets/kmz/satconus.kmz").split(","));
				lstOpenedDocuments.addEventListener('unload', onUnloadKMLFile);
				lstOpenedDocuments.addEventListener('changeVisibility', onKMLFileChangeVisibility);
				AbstractURLLoader.crossDomainProxyURLPattern = "http://wms.iblsoft.com/ria/proxy?u=${URL}";
				Projection.addCRSByProj4("ESRI:54004", "+title=World Mercator +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs");
				Projection.addCRSByProj4("ESRI:102018", "+title=North Pole Stereographic +proj=stere +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102021", "+title=South Pole Stereographic +proj=stere +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");

				m_iw.setCRSExtentAndViewBBox('CRS:84');
				
//				InteractiveLayerWMSWithQTT.avoidTilingForAllLayers = false;
				
				addLayer('dem', 1);
				addLayer('foreground', 1);
				
				scm.update(scm.getAllServicesNames());
				this.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
//				initConsole();
			}

			private function onAddedToStage(event: Event): void
			{
				this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				// init debug stats
//				var stats: Stats =  new Stats();
//				stats.x = this.stage.width - stats.width;
//				dConsoleParent.addChild(stats);
			}

			private function onEnterFrame(event: Event): void
			{
				anticollisionObjectsLength = m_iw.labelLayout.layoutObjectsLength;
			}

			private function onKeyUp(event: KeyboardEvent): void
			{
				event.preventDefault();
				if (event.isDefaultPrevented())
					trace("do not write");
			}
			private var _loadingPopup: Alert;
			private var _progressPopup: Alert;

			private function hideLoadingPopup(): void
			{
				PopUpManager.removePopUp(_loadingPopup);
			}

			private function hideProgressPopup(): void
			{
				if  (_progressPopup)
				{
					PopUpManager.removePopUp(_progressPopup);
					_progressPopup = null;
				}
			}
			private function showProgressPopup(text: String): void
			{
				if (!_progressPopup)
					_progressPopup = Alert.show(text, "Parsing progress", Alert.OK);
				else
					_progressPopup.text = text;
			}
			private function showLoadingPopup(text: String): void
			{
				_loadingPopup = Alert.show(text, "Wait please", Alert.OK);
			}

			private function kmlLoadingAndParsingStarted(): void
			{
				m_iw.suspendAnticollisionProcessing = true;
			}

			private function kmlLoadingAndParsingFinished(): void
			{
				m_iw.suspendAnticollisionProcessing = false;
			}

			private function browseForKMLFile(): void
			{
				var fileReference: FileReference = new FileReference();
				fileReference.addEventListener(Event.SELECT, onKMLFileBrowseSelect);
				var filter: Array = [new FileFilter("kml or kmz files", "*.kml;*.kmz"), new FileFilter("kml files", "*.kml"), new FileFilter("kmz files", "*.kmz")];
				fileReference.browse(filter);
			}
			private var fileReference: FileReference

			private function onKMLFileBrowseSelect(event: Event): void
			{
				trace("onKMLFileBrowseSelect");
				fileReference = event.currentTarget as FileReference;
				fileReference.addEventListener(Event.COMPLETE, onFileBrowseFileLoaded);
				fileReference.load();
			}

			private function onFileBrowseFileLoaded(event: Event): void
			{
				trace("onFileBrowseFileLoaded");
				var fileReference: FileReference = event.currentTarget as FileReference;
				var ba: ByteArray = fileReference.data;
				var kmlString: String;
				var kmlURL: String = fileReference.name;
				var kmzFile: KMZFile;
				//start kml loadind and parsing => suspend anticollision layout updating for now
				kmlLoadingAndParsingStarted();
				
				_kmlLoaderManager.addKMLLink(kmlURL, ba, true);

				var kmlConfig: KMLLayerConfiguration = _kmlLoaderManager.getKMLLayerConfigurationForURL(kmlURL);
				
				addKMLDocumentToAllDocumentsList(kmlURL, kmlConfig);
				if (!_kmlLayerDictionary)
					_kmlLayerDictionary = new Dictionary();
			}

			private function onKMZFileReady(event: Event): void
			{
				var kmzFile: KMZFile = event.target as KMZFile;
				var kmzURL: String = kmzFile.kmzURL;
				var kmzObject: Object = _kmlLayerDictionary[kmzURL];
				var kmlConfig: KMLLayerConfiguration = kmzObject.configuration as KMLLayerConfiguration;
				kmlConfig.addKMZSource(kmzFile, kmzURL);
				//and create KML layer now
				createKMLLayerFromKMLConfiguration(kmlConfig, kmzFile);
			}
			private var _kmlLayerDictionary: Dictionary;

			private function changeKML(kmlURL: String): void
			{
				if (kmlURL)
				{
					if (_kmlLayerDictionary[kmlURL])
					{
						var kmlObject: Object = _kmlLayerDictionary[kmlURL];
						var kmlLayer: InteractiveLayerKML = kmlObject.layer as InteractiveLayerKML;
						if (kmlLayer)
						{
							kmlDataProvider = kmlLayer.kml.kmlDataProvider;
							displayedKmlURL = kmlURL;
						}
					}
				}
			}

			/**
			 * Show or hide KML layer
			 */
			private function showOrHideKMLLayer(kmlURL: String): void
			{
				if (!_kmlLayerDictionary)
					_kmlLayerDictionary = new Dictionary();
				if (!_kmlLayerDictionary[kmlURL])
					loadLayer(kmlURL);
				else
				{
					//unloadLayer(kmlURL);
				}
			}

			private function loadLayer(kmlURL: String): void
			{
				//start kml loadind and parsing => suspend anticollision layout updating for now
				kmlLoadingAndParsingStarted();
				
				_kmlLoaderManager.addKMLLink(kmlURL, null, true);
				var kmlConfig: KMLLayerConfiguration = _kmlLoaderManager.getKMLLayerConfigurationForURL(kmlURL);
				
				addKMLDocumentToAllDocumentsList(kmlURL, kmlConfig);
			/*
			var extension: String;
			var urlArr: Array = kmlURL.split('.');
			if (urlArr)
				extension = urlArr[urlArr.length - 1];
//				toggleButton.enabled = false;
			var kmlConfig: KMLLayerConfiguration = new KMLLayerConfiguration();

			if (extension == KMLType.KML)
			{
				_kmlLayerDictionary[kmlURL] = {url: kmlURL, type: KMLType.KML};


				//kml layer does not exist yet create it
				kmlConfig.addEventListener(KMLEvent.PARSING_STARTED, onKMLParsingStarted);
				kmlConfig.addEventListener(KMLEvent.PARSING_FINISHED, onKMLParsingFinished);
				kmlConfig.addEventListener(KMLLayerConfiguration.KML_FILE_LOADED, onKMLFileLoaded);
				kmlConfig.loadKML(kmlURL, 'assets/');

			} else if (extension == KMLType.KMZ) {
				_kmlLayerDictionary[kmlURL] = {url: kmlURL, type: KMLType.KMZ};

				kmlConfig.addEventListener(KMLEvent.UNPACKING_STARTED, onKMZUnpackingStarted);
				kmlConfig.addEventListener(KMLEvent.UNPACKING_FINISHED, onKMZUnpackingFinished);
				kmlConfig.addEventListener(KMLEvent.PARSING_STARTED, onKMLParsingStarted);
				kmlConfig.addEventListener(KMLEvent.PARSING_FINISHED, onKMLParsingFinished);
				kmlConfig.addEventListener(KMLLayerConfiguration.KMZ_FILE_LOADED, onKMZFileLoaded);
				kmlConfig.loadKMZ(kmlURL);
			}
			*/
			}

			private function onKMLFileChangeVisibility(event: Event): void
			{
				trace("onKMLFileChangeVisibility");
				var renderer: KMLFileListItemRenderer = event.target as KMLFileListItemRenderer;
				var kmlURL: String = renderer.path as String;
				if (_kmlLayerDictionary[kmlURL])
				{
					var kmlObject: Object = _kmlLayerDictionary[kmlURL];
					var kmlLayer: InteractiveLayerKML = kmlObject.layer as InteractiveLayerKML;
					if (kmlLayer)
						kmlDataProvider = kmlLayer.kml.kmlDataProvider;
					
					kmlLayer.visible = !kmlLayer.visible;
				}
				
			}
			private function onUnloadKMLFile(event: Event): void
			{
				trace("unload");
				var renderer: KMLFileListItemRenderer = event.target as KMLFileListItemRenderer;
				var kmlURL: String = renderer.path as String;
				unloadLayer(kmlURL);
				if (displayedKmlURL == kmlURL)
				{
					//if currently display kml is one which is unloaded, remove structure from Tree component
					kmlDataProvider.removeAll();
				}
				var total: int = openedDocuments.length;
				for (var i: int = 0; i < total; i++)
				{
					var url: String = openedDocuments.getItemAt(i).path as String;
					if (url == kmlURL)
					{
						openedDocuments.removeItemAt(i);
						if (_kmlLayerDictionary[kmlURL])
						{
							var kmlObject: Object = _kmlLayerDictionary[kmlURL];
							var kmlLayer: InteractiveLayerKML = kmlObject.layer as InteractiveLayerKML;
							if (kmlLayer)
								kmlDataProvider = kmlLayer.kml.kmlDataProvider;
						}
						break;
					}
				}
			}

			private function unloadLayer(kmlURL: String): void
			{
				//remove KML layer
				var layerObject: KMLLoaderObject = _kmlLayerDictionary[kmlURL] as KMLLoaderObject;
				if (layerObject)
				{
					var kmlLayer: InteractiveLayerKML = layerObject.layer as InteractiveLayerKML;
					var watcher: ChangeWatcher = layerObject.dataProviderWatcher as ChangeWatcher;
					if (watcher)
						watcher.unwatch();
					if (kmlLayer)
					{
						var features: ArrayCollection = kmlLayer.features;
						for each (var feature: KMLFeature in features)
						{
							if (feature)
								feature.removeEventListener(KMLFeatureEvent.KML_FEATURE_CLICK, onFeatureClick);
						}
						kmlLayer.removeEventListener(KMLFeatureEvent.KML_FEATURE_CLICK, onFeatureClick);
						kmlLayer.removeEventListener(KMLFeatureEvent.KML_FEATURE_ROLL_OVER, onFeatureRollOver);
						kmlLayer.removeEventListener(KMLFeatureEvent.KML_FEATURE_ROLL_OUT, onFeatureRollOut);
						m_iw.removeLayer(kmlLayer, true);
						kmlLayer.destroy();
						
						var kmlLayerConfiguration: KMLLayerConfiguration = (_kmlLayerDictionary[kmlURL] as KMLLoaderObject).configuration;
						removeKMLLayerConfigurationEventListeners(kmlLayerConfiguration);
						
						delete _kmlLayerDictionary[kmlURL];
					}
					else
						debug("unloadLayer: cannot find layer in dictionary");
				} else {
					debug("unloadLayer: cannot find KMLLoaderObject");
				}
			}

			private function adKMLLayerConfigurationEventListeners(kmlConfig: KMLLayerConfiguration): void
			{
				kmlConfig.addEventListener(KMLEvent.PARSING_PROGRESS, onKMLParsingProgress);
				kmlConfig.addEventListener(KMLEvent.UNPACKING_PROGRESS, onKMLUnpackingProgress);
				kmlConfig.addEventListener(KMLEvent.PARSING_FINISHED, onDynamicKMLParsed);
				
				kmlConfig.addEventListener(KMLParsingStatusEvent.PARSING_FAILED, onKMLParsingStatus);
				kmlConfig.addEventListener(KMLParsingStatusEvent.PARSING_PARTIALLY_SUCCESFULL, onKMLParsingStatus);
				kmlConfig.addEventListener(KMLParsingStatusEvent.PARSING_SUCCESFULL, onKMLParsingStatus);
			}
			private function removeKMLLayerConfigurationEventListeners(kmlConfig: KMLLayerConfiguration): void
			{
				kmlConfig.removeEventListener(KMLEvent.PARSING_PROGRESS, onKMLParsingProgress);
				kmlConfig.removeEventListener(KMLEvent.UNPACKING_PROGRESS, onKMLUnpackingProgress);
				kmlConfig.removeEventListener(KMLEvent.PARSING_FINISHED, onDynamicKMLParsed);
				
				kmlConfig.removeEventListener(KMLParsingStatusEvent.PARSING_FAILED, onKMLParsingStatus);
				kmlConfig.removeEventListener(KMLParsingStatusEvent.PARSING_PARTIALLY_SUCCESFULL, onKMLParsingStatus);
				kmlConfig.removeEventListener(KMLParsingStatusEvent.PARSING_SUCCESFULL, onKMLParsingStatus);
			}
			
			private function addToLayerDictionary(path: String, data: Object): void
			{
				_kmlLayerDictionary[path] = data;
			}
			private function onKMZFileLoaded(event: KMLEvent): void
			{
				var kmlConfig: KMLLayerConfiguration = event.kmlLayerConfiguration;
				
				adKMLLayerConfigurationEventListeners(kmlConfig);
				
//				_kmlLayerDictionary[kmlConfig.kmlPath] = event.data;
				addToLayerDictionary(kmlConfig.kmlPath, event.data);
				/**
				 * we don't need to call kmlConfig.addKMLSource, because it was called, when kml was loaded.
				 * But if you load KML by yourself, you need to call addKMLSource function add KML source to KMLLayerConfiguration);
				 */
				createKMLLayerFromKMLConfiguration(kmlConfig);
			}

			private function onKMZUnpackingStarted(event: KMLEvent): void
			{
//				showLoadingPopup("KMZ unpacking started");
			}
			private function onKMZUnpackingProgress(event: KMLEvent): void
			{
//				onKMLUnpackingProgress(event);
			}

			private function onKMZUnpackingFinished(event: KMLEvent): void
			{
				hideLoadingPopup();
			}

			private function onKMLParsingStarted(event: KMLEvent): void
			{
//				showLoadingPopup("KML parsing started");
			}

			private function onKMLUnpackingProgress(event: KMLEvent): void
			{
//				showProgressPopup("KML unpacking: " + event.progress + "%");
			}
			private function onKMLParsingProgress(event: KMLEvent): void
			{
//				showProgressPopup("KML Parsing: " + event.progress + "%");
			}
			private function onKMLParsingFinished(event: KMLEvent): void
			{
				hideLoadingPopup();
				hideProgressPopup();
			}

			private function onKMLFileLoaded(event: KMLEvent): void
			{
				var kmlConfig: KMLLayerConfiguration = event.kmlLayerConfiguration;
				
				adKMLLayerConfigurationEventListeners(kmlConfig);
				
//				_kmlLayerDictionary[kmlConfig.kmlPath] = event.data;
				addToLayerDictionary(kmlConfig.kmlPath, event.data);
				
				/**
				 * we don't need to call kmlConfig.addKMLSource, because it was called, when kml was loaded.
				 * But if you load KML by yourself, you need to call addKMLSource function add KML source to KMLLayerConfiguration);
				 */
				createKMLLayerFromKMLConfiguration(kmlConfig);
				kmlLoadingAndParsingFinished();
			}

			/**
			 * Add kml from dynamic popup. KML was not loaded, just user wrote or pasted kml source to popup
			 **/
			private function addDynamicKML(kmlSource: String, kmlPath: String): void
			{
				if (!_kmlLayerDictionary)
					_kmlLayerDictionary = new Dictionary();
				var kmlConfig: KMLLayerConfiguration = new KMLLayerConfiguration();
				kmlConfig.kmlPath = kmlPath;
				
				addKMLDocumentToAllDocumentsList(kmlPath, kmlConfig);
//				_kmlLayerDictionary[kmlConfig.kmlPath] = new KMLLoaderObject(kmlPath, KMLType.KML, kmlConfig);
				addToLayerDictionary(kmlConfig.kmlPath, new KMLLoaderObject(kmlPath, KMLType.KML, kmlConfig));
				
				//need to wait for KML to be parsed (it can be parsed in more that one flash player frame, so we need to wait for proper event KMLEvent.PARSING_FINISHED
				adKMLLayerConfigurationEventListeners(kmlConfig);
				
				kmlConfig.addKMLSource(kmlSource, kmlPath, '');
			}
			
			private function addKMLDocumentToAllDocumentsList(kmlPath: String, kmlConfig: KMLLayerConfiguration): void
			{
				openedDocuments.addItem({path: kmlPath, configuration: kmlConfig});	
			}

			private function onKMLParsingStatus(event: KMLParsingStatusEvent): void
			{
				Alert.show('KML parsing status: ' + event.type, 'KML Parsing Status', Alert.OK);
			}
			private function onDynamicKMLParsed(event: KMLEvent): void
			{
//				var kmlConfig: KMLLayerConfiguration = event.target as KMLLayerConfiguration;
//				createKMLLayerFromKMLConfiguration(kmlConfig);
//				kmlLoadingAndParsingFinished();
			}

			private function createKMLLayerFromKMLConfiguration(kmlConfig: KMLLayerConfiguration, kmzFile: KMZFile = null): void
			{
				var kmlLayer: InteractiveLayerKML = kmlConfig.createInteractiveLayer(m_iw) as InteractiveLayerKML;
				kmlLayer.name = 'KML - Tropical Storm';
				kmlLayer.kmzFile = kmzFile;
				m_iw.addLayer(kmlLayer);
				kmlLayer.addEventListener(KMLFeatureEvent.KML_FEATURE_CLICK, onFeatureClick);
				kmlLayer.addEventListener(KMLFeatureEvent.KML_FEATURE_ROLL_OVER, onFeatureRollOver);
				kmlLayer.addEventListener(KMLFeatureEvent.KML_FEATURE_ROLL_OUT, onFeatureRollOut);
				var features: ArrayCollection = kmlLayer.features;
				for each (var feature: KMLFeature in features)
				{
					if (feature)
						feature.addEventListener(KMLFeatureEvent.KML_FEATURE_CLICK, onFeatureClick);
				}
				var watcher: ChangeWatcher = BindingUtils.bindProperty(this, "kmlDataProvider", kmlLayer.kml, "kmlDataProvider");
				if (_kmlLayerDictionary[kmlConfig.kmlPath])
				{
					var kmlLoaderObject: KMLLoaderObject = _kmlLayerDictionary[kmlConfig.kmlPath] as KMLLoaderObject;
					kmlLoaderObject.layer = kmlLayer;
					kmlLoaderObject.dataProviderWatcher = watcher;
				}
//				kmlDataProvider = kmlLayer.kml.kmlDataProvider;
				trace("kmlDataProvider: " + kmlDataProvider);
			}

			private function onFeatureRollOver(event: KMLFeatureEvent): void
			{
				trace("Example8: feature [" + event.kmlFeature.name + "]: <" + event.kmlFeature.description + "> was rolled over");
			}

			private function onFeatureRollOut(event: KMLFeatureEvent): void
			{
				trace("Example8: feature [" + event.kmlFeature.name + "]: <" + event.kmlFeature.description + "> was rolled out");
			}

			private function onFeatureClick(event: KMLFeatureEvent): void
			{
				trace("Example8: feature [" + event.kmlFeature.name + "]: <" + event.kmlFeature.description + "> was clicked");
				//if you want to see how to open custom KML Info window, uncomment next section
			/*
			//prevent default and do not display default window
			event.preventDefault();

			var popup: CustomKMLPopup = new CustomKMLPopup();
			KMLPopupManager.getInstance().addPopUp(popup, FlexGlobals.topLevelApplication as DisplayObject, event.kmlFeature);
			*/
			}

			private function onKMLTreeItemClick(event: ListEvent): void
			{
				debug("onKMLTreeItemClick: " + event.itemRenderer);
				debug("onKMLTreeItemClick: data: " + event.itemRenderer.data);
				var data: Object = event.itemRenderer.data;
				var feature: KMLFeature = data.data as KMLFeature;
				var centerPoint: flash.geom.Point = feature.getCenter();
				var coord: Coord = new Coord("CRS:84", centerPoint.x, centerPoint.y);
				if (setCenter(coord))
				{
					//change zoom
					var extentWithCRS: CRSWithBBox = feature.getExtent();
					if (extentWithCRS)
					{
						var extent: BBox;
						if (m_iw.crs != 'CRS:84')
						{
							extent = extentWithCRS.bboxInCRS(m_iw.crs);
							trace("Set extent to " + extent.toBBOXString());
						}
						else
							extent = extentWithCRS.bbox;
						m_iw.setViewBBox(extent, true);
					}
				}
//				if (feature is Placemark)
//				{
//					var placemark: Placemark = feature as Placemark;
//					debug("onKMLTreeItemClick: placemark: " + placemark + " geometry: " + placemark.geometry);
//					if (placemark.geometry is MultiGeometry)
//					{
//							
//					}
//					
//					if (placemark.geometry is com.iblsoft.flexiweather.ogc.kml.features.Point)
//					{
//						var point: com.iblsoft.flexiweather.ogc.kml.features.Point = placemark.geometry as com.iblsoft.flexiweather.ogc.kml.features.Point;
//						
//						var latString: String = (point.coordinates.coordsList[0] as Object).lat;
//						var lonString: String = (point.coordinates.coordsList[0] as Object).lon;
//						
//						setCenter('CRS:84', parseFloat(latString), parseFloat(lonString));
//					}
//				} else if (feature is GroundOverlay) {
//					trace("groundOverlay");
//					var overlay: GroundOverlay = feature as GroundOverlay
//					debug("onKMLTreeItemClick: overlay: " + overlay);
//					var latlonbox: LatLonBox = overlay.latLonBox;
//					var lat: Number = latlonbox.north + (latlonbox.south - latlonbox.north)/2 
//					var lon: Number = latlonbox.west + (latlonbox.east - latlonbox.west)/2 
//					
//					setCenter('CRS:84', lat, lon);
//				}
			}

			private function setCenter(c: Coord): Boolean
			{
				trace("old bbox: " + m_iw.getViewBBox());
				if (!isNaN(c.x) && !isNaN(c.y))
				{
					m_iw.setCenter(c);
					return true;
				}
				return false;
			}
			/*
			private var debugConsole: com.iblsoft.flexiweather.plugins.IConsole
			private function initConsole(): void
			{
				debugConsole = new CustomDebugConsole();
				if (debugConsole.getConsole() is DConsole)
					initializeDConsole(debugConsole.getConsole() as DConsole)

				KMLBitmapLoader.console = debugConsole;
				AbstractURLLoader.debugConsole = debugConsole;
				KMLResourceManager.debugConsole = debugConsole;
				DefaultKMLRenderer.debugConsole = debugConsole;
				KMLFeature.debugConsole = debugConsole;
				AnticollisionLayout.debugConsole = debugConsole;
			}
			private function initializeDConsole(consoleObject: DConsole): void
			{
				var view: ConsoleView = consoleObject.view;
//				trace(view.width + " , " + view.height + " , " + view.rect + " alpha: " + view.alpha + " visL : " + view.visible);
//				trace(view.parent + " , " + view.stage);
				dConsoleParent.addChild(consoleObject as DisplayObject);

			}
			*/
			private var _layoutVisibilityBeforePanning: Boolean;

			private function onRealPan(event: DynamicEvent): void
			{
				for each (var obj: Object in _kmlLayerDictionary)
				{
					var layer: InteractiveLayerKML = obj.layer as InteractiveLayerKML;
					if (layer)
						layer.testPan(event);
				}
			}
			private function startPanning(): void
			{
				m_iw.suspendAnticollisionProcessing = true;
				_layoutVisibilityBeforePanning = m_iw.labelLayout.visible;
				m_iw.labelLayout.visible = false;
				
				for each (var obj: Object in _kmlLayerDictionary)
				{
					var layer: InteractiveLayerKML = obj.layer as InteractiveLayerKML;
					if (layer)
						layer.suspendUpdating = true;
				}
			}

			private function stopPanning(): void
			{
				m_iw.suspendAnticollisionProcessing = false;
				m_iw.labelLayout.visible = _layoutVisibilityBeforePanning;
				
				for each (var obj: Object in _kmlLayerDictionary)
				{
					var layer: InteractiveLayerKML = obj.layer as InteractiveLayerKML;
					if (layer)
						layer.suspendUpdating = false;
				}
			}

			private function debugKRM(): void
			{
//				icons.removeAllElements();
				for each (var obj: Object in _kmlLayerDictionary)
				{
					var layer: InteractiveLayerKML = obj.layer as InteractiveLayerKML;
					if (!layer)
						continue;
					var resourceManager: KMLResourceManager = layer.kml.resourceManager;
					if (!resourceManager)
						continue;
					var bitmapDatas: Array = resourceManager.getAllBitmapDatas();
					for each (var bd: BitmapData in bitmapDatas)
					{
						var img: Image = new Image();
						img.source = new Bitmap(bd);
						if (bd.width > 100 || bd.height > 100)
						{
							var biggerSize: int = Math.max(bd.width, bd.height);
							var sc: Number = 100 / biggerSize;
							img.scaleX = img.scaleY = sc;
						}
//						icons.addElement(img);
					}
				}
			}

			private function debug(txt: String): void
			{
//				if (debugConsole)
//				{
//					debugConsole.print("Example8: " + txt,'Info','Example8');
//				}
			}

			private function showPopupForDynamicKML(): void
			{
				var popup: DynamicKMLPopup = new DynamicKMLPopup();
				popup.addEventListener('createKML', onCreateDynamicKML);
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}
			private var dynamicKMLUID: int = 0;

			private function onCreateDynamicKML(event: DynamicEvent): void
			{
				var kml: String = event[KMLType.KML] as String;
				trace("create kml: " + kml);
				dynamicKMLUID++;
				addDynamicKML(kml, "dynamicKML" + dynamicKMLUID);
			}
		]]>
	</fx:Script>
</FlexiWeatherTemplate>
