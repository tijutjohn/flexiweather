<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		minWidth="955" minHeight="600" xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
		creationComplete="onCreationComplete(event)"
		skinClass="spark.skins.spark.ApplicationSkin">
	<fx:Metadata>
		[Event(name="preloadedFramesCountChange",type="flash.events.Event")]
		[Event(name="preloadingFramesCountChange",type="flash.events.Event")]
	</fx:Metadata>
	<fx:Declarations>

		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingLeft="10"
			paddingRight="10">
		<s:HGroup id="hboxCaption" width="100%" verticalAlign="middle">
			<s:Label 
					text="This example demonstrates preloading of frames for WMS Temperature layer for smooth animation."/>
			<s:Label id="labelProgress" textAlign="right" fontWeight="bold"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="Widget enabled = {m_iw.enabled} listening for changes {m_iw.listeningForChanges}"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Button label="Preload all frames" click="preloadAllFrames()"
					enabled="{preloadAllFramesEnabled}"/>

			<!--s:Button label="Preload next 4 frames" click="preloadFrames(4)"/-->
			<s:Button label="Clear cache" click="clearCache()" enabled="{!b_framesArePreloading}"/>
			<s:Button label="Cancel preloading" click="cancelPreloading()" enabled="{b_framesArePreloading}"/>
			<s:ToggleButton label="Use tiled layer" enabled="{!b_framesArePreloading}"
					click="useTiledLayer((event.currentTarget as ToggleButton).selected)"
					selected="{m_createTiledLayers}"/>
			<s:ToggleButton label="Auto play" id="btnAutoPlay"
					click="autoPlay((event.currentTarget as ToggleButton).selected)"
					selected="{autoPlayEnabled}"/>
			<s:Button label="Remove Layer" click="removeLayer()"/>

			<!--s:Button label="Update progress" click="updateTotalProgress()"/-->
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Label textAlign="right" fontWeight="bold" text="Frames:" width="{labelWidth}"/>
			<s:HSlider id="sliderFrame" width="500" minimum="1" maximum="{maxFrames}"
					snapInterval="1" enabled="{!autoPlayEnabled}" liveDragging="true"
					showDataTip="true" change="frameChangeHandler(event)"/>
			<s:Label textAlign="right" fontWeight="bold" text="Time: {currentTime}"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Label textAlign="right" fontWeight="bold" text="Total Preloading progress:"
					width="{labelWidth}"/>
			<mx:ProgressBar id="totalProgress" width="500" height="20" mode="manual"
					labelPlacement="center" label="Preloading frames"/>
		</s:HGroup>
		<widgets:InteractiveWidget id="m_iw" width="100%" height="100%">
			<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1"/>
			<widgets:InteractiveLayerPan id="m_ilp" zOrder="2"/>
		</widgets:InteractiveWidget>
	</s:VGroup>
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.events.InteractiveLayerEvent;
			import com.iblsoft.flexiweather.events.InteractiveLayerProgressEvent;
			import com.iblsoft.flexiweather.net.loaders.AbstractURLLoader;
			import com.iblsoft.flexiweather.ogc.BBox;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerMSBase;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerQTTMS;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerWMS;
			import com.iblsoft.flexiweather.ogc.SynchronisedVariableChangeEvent;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.data.viewProperties.IViewProperties;
			import com.iblsoft.flexiweather.ogc.data.viewProperties.WMSViewProperties;
			import com.iblsoft.flexiweather.ogc.events.GetCapabilitiesEvent;
			import com.iblsoft.flexiweather.ogc.managers.OGCServiceConfigurationManager;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
			import com.iblsoft.flexiweather.ogc.tiling.TiledTilesProvider;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.proj.Projection;
			import com.iblsoft.flexiweather.utils.ISO8601Parser;
			import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
			import com.iblsoft.flexiweather.widgets.InteractiveDataLayer;
			import com.iblsoft.flexiweather.widgets.InteractiveLayerMap;
			import com.iblsoft.flexiweather.widgets.InteractiveLayerZoom;
			import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;
			
			import flash.utils.setInterval;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import spark.core.IViewport;
			import spark.filters.GlowFilter;
			
			/**
			 * - set this to "true" if you want preload all frames at once and use buffer, PROGRESS event and 1 PRELOADING_FINISHED event
			 * - set this to "false" if you want preload just one frame, wait for PRELOADING_FINISHED event and then preload next frame
			 */
			public static const USE_PROGRESS_EVENT: Boolean = false;
			
			
			// you can limit maximum of loading (and preloading) frames
			public static const MAX_FRAMES_ANIMATED: int = 8;
			
			public static const PRELOADINGFRAMESCOUNT_CHANGE_EVENT: String = "preloadingFramesCountChange";
			public static const PRELOADEDFRAMESCOUNT_CHANGE_EVENT: String = "preloadedFramesCountChange";
			
			
			
			[Bindable]
			public var maxFrames: int;
			[Bindable]
			public var labelWidth: int = 220;
			public var timerInterval: int = 100;
			// set this to true to use tiled temperature layer
			[Bindable]
			private var m_createTiledLayers: Boolean = true;
			/**
			 * Temperature layer
			 */
			private var m_layerTemperature: InteractiveLayerMSBase;
			private var m_layerForegroundBorders: InteractiveLayerWMS;
			/**
			 * Boolean property if capabilities are received
			 */
			private var b_getCapabilitiesReceived: Boolean;
			[Bindable]
			private var currentTime: String;
			/**
			 * Boolean property indicates that all frames are preloading
			 */
			[Bindable]
			private var b_framesArePreloaded: Boolean;
			/**
			 * Boolean property indicates that all frames are preloading
			 */
			[Bindable]
			private var b_framesArePreloading: Boolean;
			/**
			 * array of forecast string values from capabilities request. We need it for slider to change FORECAST dimension of temperature layer
			 */
			[Bindable]
			private var preloadingData: ArrayCollection;
			/**
			 * how many frames are already preloaded
			 */
			private var _preloadedFramesCount: int = 0;

			[Bindable(event = "preloadedFramesCountChange")]
			public function get preloadedFramesCount(): int
			{
				return _preloadedFramesCount;
			}
			
			private var b_cancelled: Boolean;
			
			[Bindable(event = "preloadingChanged")]
			public function get preloadAllFramesEnabled(): Boolean
			{
				return b_cancelled || (!b_framesArePreloaded && !b_framesArePreloading);
			}

			public function set preloadedFramesCount(value: int): void
			{
				if (_preloadedFramesCount != value)
				{
					_preloadedFramesCount = value;
					dispatchEvent(new Event(PRELOADEDFRAMESCOUNT_CHANGE_EVENT));
				}
			}
			/**
			 * how many frames are currently preloading
			 */
			private var _preloadingFramesCount: int = 0;

			[Bindable(event = "preloadingFramesCountChange")]
			public function get preloadingFramesCount(): int
			{
				return _preloadingFramesCount;
			}

			public function set preloadingFramesCount(value: int): void
			{
				if (_preloadingFramesCount != value)
				{
					_preloadingFramesCount = value;
					dispatchEvent(new Event(PRELOADINGFRAMESCOUNT_CHANGE_EVENT));
				}
			}
			private var scm: OGCServiceConfigurationManager;
			/**
			 * Timer for auto play
			 */
			private var autoPlayTimer: Timer;
			/**
			 * Current auto play position
			 */
			private var autoPlayFramePosition: int;
			/**
			 * True if auto play is "ON"
			 */
			[Bindable]
			private var autoPlayEnabled: Boolean;
			/**
			 * True if autoplay is paused because of waiting for loading new frame
			 */
			[Bindable]
			private var autoPlayPaused: Boolean;
			private var s_serverURL: String;

			
			private function removeLayer(): void
			{
				m_iw.interactiveLayerMap.removeLayer(m_layerTemperature);
			}
			
			private function cancelPreloading(): void
			{
				trace("cancelPreloading");
					
				if (m_layerTemperature)
					m_layerTemperature.cancelPreload();
					
				b_cancelled = true;
				b_framesArePreloading = false;
				b_framesArePreloaded = true;
				notifyPreloadingChange();
			}
			
			/**
			 * Clear whole cache
			 */
			private function clearCache(): void
			{
				preloadedFramesCount = 0;
				preloadingFramesCount = 0;
				m_layerTemperature.clearCache();
				//set slider to first frame
				sliderFrame.value = 0;
				b_framesArePreloaded = false;
				b_framesArePreloading = false;
				notifyPreloadingChange();
			}

			/**
			 * Initialization of example. Temperature layer creation, call get capabilities
			 */
			private function onCreationComplete(event: Event): void
			{
//				InteractiveLayerWMSWithQTT.avoidTilingForAllLayers = true;
				
				if (Capabilities.playerType == "Desktop")
					BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(labelProgress);
				else
				{
					BackgroundJobManager.getInstance().createDefaultPreloader();
					BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
				}
				m_iw.setCRSExtentAndViewBBox('EPSG:900913');
				s_serverURL = 'http://ogcie.iblsoft.com';
				scm = OGCServiceConfigurationManager.getInstance();
				var srv: WMSServiceConfiguration = scm.getService(
						"ria",
						s_serverURL + "/ria", new Version(1, 3, 0),
						WMSServiceConfiguration) as WMSServiceConfiguration;
				
				var map: InteractiveLayerMap = new InteractiveLayerMap();
				m_iw.addLayer(map);
				
				
				createTemperatureLayer();
				
				
				var lcqt: WMSWithQTTLayerConfiguration;
				lcqt = new WMSWithQTTLayerConfiguration(srv, ["foreground-lines"]);
				lcqt.label = "Overlays/Border lines";
				m_layerForegroundBorders = new InteractiveLayerWMSWithQTT(m_iw, lcqt);
				m_iw.interactiveLayerMap.addLayer(m_layerForegroundBorders);
				m_layerForegroundBorders.name = 'Borders';
				m_layerForegroundBorders.zOrder = 1000;
//				m_layerForegroundBorders.refresh(true);
				
				Projection.addCRSByProj4("ESRI:54004", "+title=World Mercator +proj=merc +lat_ts=0 +lon_0=0 +k=1.000000 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102018", "+title=North Pole Stereographic +proj=stere +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102021", "+title=South Pole Stereographic +proj=stere +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				
				setInterval(updateTotalProgress, 500);
			}

			private function createTemperatureLayer(): void
			{
				if (m_layerTemperature)
				{
					//remove old listeners
					m_layerTemperature.removeEventListener(InteractiveDataLayer.LOADING_STARTED, onTemperatureLayerLoadingStarted);
					m_layerTemperature.removeEventListener(InteractiveDataLayer.LOADING_FINISHED, onTemperatureLayerLoadingFinished);
					m_layerTemperature.removeEventListener(InteractiveDataLayer.LOADING_FINISHED_FROM_CACHE, onTemperatureLayerLoadingFinished);
					m_layerTemperature.removeEventListener(InteractiveDataLayer.PRELOADING_STARTED, onTemperatureLayerPreloadingStarted);
					m_layerTemperature.removeEventListener(InteractiveDataLayer.PRELOADING_FINISHED, onTemperatureLayerPreloadingFinished);
					m_layerTemperature.removeEventListener(InteractiveDataLayer.PROGRESS, onTemperatureLayerProgress);
					m_layerTemperature.removeEventListener(GetCapabilitiesEvent.CAPABILITIES_RECEIVED, onCapabilitiesReceived);
					m_iw.removeLayer(m_layerTemperature, true);
				}
				var srv2: WMSServiceConfiguration = scm.getService(
						"gfs",
						s_serverURL + "/ncep/gfs", new Version(1, 3, 0),
						WMSServiceConfiguration) as WMSServiceConfiguration;
				var lc: WMSLayerConfiguration = createLayerConfiguration(srv2, ["temperature"]);
				lc.label = "Temperature";
				m_layerTemperature = lc.createInteractiveLayer(m_iw) as InteractiveLayerMSBase;
				m_iw.interactiveLayerMap.addLayer(m_layerTemperature);
//				m_layerTemperature.refresh(true);
				m_layerTemperature.addEventListener(InteractiveDataLayer.LOADING_STARTED, onTemperatureLayerLoadingStarted);
				m_layerTemperature.addEventListener(InteractiveDataLayer.LOADING_FINISHED, onTemperatureLayerLoadingFinished);
				m_layerTemperature.addEventListener(InteractiveDataLayer.LOADING_FINISHED_FROM_CACHE, onTemperatureLayerLoadingFinished);
				m_layerTemperature.addEventListener(InteractiveDataLayer.PRELOADING_STARTED, onTemperatureLayerPreloadingStarted);
				m_layerTemperature.addEventListener(InteractiveDataLayer.PRELOADING_FINISHED, onTemperatureLayerPreloadingFinished);
				m_layerTemperature.addEventListener(InteractiveDataLayer.PROGRESS, onTemperatureLayerProgress);
				m_layerTemperature.addEventListener(GetCapabilitiesEvent.CAPABILITIES_RECEIVED, onCapabilitiesReceived);
				scm.update(scm.getAllServicesNames());
			}

			private function createLayerConfiguration(srv: WMSServiceConfiguration, layerNames: Array): WMSLayerConfiguration
			{
				if (m_createTiledLayers)
				{
					var wmsWithQTTConfig: WMSWithQTTLayerConfiguration = new WMSWithQTTLayerConfiguration(srv, layerNames);
					wmsWithQTTConfig.avoidTiling = !m_createTiledLayers;
					return wmsWithQTTConfig;
				}
				else
					return new WMSLayerConfiguration(srv, layerNames);
			}

			private function useTiledLayer(b_play: Boolean): void
			{
				//stop autoPlay
				
				btnAutoPlay.selected = false;
				
				autoPlay(false);
				clearCache();
				m_createTiledLayers = b_play;
				//recreate new layer
				createTemperatureLayer();
			}

			/**
			 * start autoplay of frames
			 */
			private function autoPlay(b_play: Boolean): void
			{
				if (!autoPlayTimer)
				{
					autoPlayTimer = new Timer(timerInterval);
					autoPlayTimer.addEventListener(TimerEvent.TIMER, onAutoPlayTimer);
				}
				if (b_play)
					startAutoPlay();
				else
					stopAutoPlay();
			}

			private function startAutoPlay(bJustStartTimer: Boolean = false): void
			{
				autoPlayFramePosition = sliderFrame.value;
				autoPlayTimer.start();
				if (!bJustStartTimer)
					autoPlayEnabled = true;
			}

			/**
			 * Pause autoplay functionality because of loading next frame from server
			 */
			private function pauseAutoPlay(): void
			{
				stopAutoPlay(true);
				autoPlayPaused = true;
			}

			private function stopAutoPlay(bJustStopTimer: Boolean = false): void
			{
				autoPlayTimer.stop();
				if (!bJustStopTimer)
					autoPlayEnabled = false;
			}

			/**
			 * Main animating function for auto play all temperatures frames
			 */
			private function onAutoPlayTimer(event: TimerEvent): void
			{
				if (!preloadingData)
					return;
				autoPlayFramePosition++;
				var totalFrames: int = preloadingData.length;
				if (autoPlayFramePosition >= totalFrames)
					autoPlayFramePosition = 0;
				if (isFramePreloaded(autoPlayFramePosition))
				{
					sliderFrame.value = autoPlayFramePosition;
					changeFrame(autoPlayFramePosition);
				}
				else
					autoPlayFramePosition--;
			}

			private function isFramePreloaded(frameNr: int): Boolean
			{
				if (preloadingData && preloadingData.length > frameNr)
				{
					var viewProperties: IViewProperties = preloadingData.getItemAt(frameNr) as IViewProperties;
					return m_layerTemperature.isPreloaded(viewProperties);
				}
				return false;
			}

			/**
			 * Preload next "count" frames (if available)
			 */
			private function preloadFrames(count: int): void
			{
				if (b_getCapabilitiesReceived)
				{
					b_framesArePreloading = true;
					notifyPreloadingChange();
					preloadFramesAfterCapabilitiesReceived(count);
				}
			}

			/**
			 * User calls this function to preload all frames
			 */
			private function preloadAllFrames(): void
			{
				//load get capabilities request to find out all frames
				if (b_getCapabilitiesReceived)
				{
					b_framesArePreloading = true;
					notifyPreloadingChange();
					preloadAllFramesAfterCapabilitiesReceived();
				}
			}

			private function filterFramesCount(arr: Array, total: int): Array
			{
				var result: Array = [];
				var total: int = Math.min(arr.length, total);
				for (var i: int = 0; i < total; i++)
				{
					result.push(arr[i]);
				}
				return result;
			}
			/**
			 * Get all FORECAST value string from Temperature layer. It must be called after capabilities are receiverd and parsed
			 */
			private function getForecastValues(): void
			{
				var dimNames: Array = filterFramesCount(m_layerTemperature.getWMSDimensionsNames(), MAX_FRAMES_ANIMATED);
				var dimValues: Array = filterFramesCount(m_layerTemperature.getWMSDimensionsValues('FORECAST'), MAX_FRAMES_ANIMATED);
				if (dimValues)
				{
					maxFrames = dimValues.length;
					var currViewData: WMSViewProperties = m_layerTemperature.currentViewProperties as WMSViewProperties;
					var total: int = dimValues.length;
					preloadingData = new ArrayCollection();
					//0th item is currently loaded frame, so it will not be preloaded again
					for (var i: int = 0; i < total; i++)
					{
						var dimValue: Object = dimValues[i] as Object;
						//store viewProperties for each frame
						var frameViewProperties: WMSViewProperties = getViewData(dimValue.value) as WMSViewProperties;
						preloadingData.addItem(frameViewProperties);
					}
				}
			}

			private var _currentPreloadingPosition: int;
			
			private function preloadFramesAfterCapabilitiesReceived(count: int): void
			{
				if (preloadingData)
				{
					updateTotalProgress();
					var total: int = preloadingData.length;
					var preloading: int = preloadedFramesCount + preloadingFramesCount;
					var totalForPreloading: int = Math.min(total, preloading + count);
					var leftForPreloading: int = total - totalForPreloading;
//					trace("Preload next: [" + preloading + " , " + totalForPreloading + "] After preload there will be left: " + leftForPreloading + " frames for preloading.");
					
					if (USE_PROGRESS_EVENT)
					{
						for (var i: int = preloading; i < totalForPreloading; i++)
						{
							preloadDataAtPosition(i);
						}
					} else {
						
						//just preload first frame
						_currentPreloadingPosition = 0;
						preloadDataAtPosition(_currentPreloadingPosition);
					}
				}
			}
			
			private function preloadDataAtPosition(position: int): void
			{
				var viewProperties: WMSViewProperties = preloadingData.getItemAt(position) as WMSViewProperties;
				preloadViewData(viewProperties);
			}

			/**
			 * Preload all Temperature layer frames with new WMSViewProperties class
			 */
			private function preloadAllFramesAfterCapabilitiesReceived(): void
			{
 				if (preloadingData)
				{
					b_cancelled = false;
					b_framesArePreloading = true;
					var total: int = preloadingData.length;
					//0th item is currently loaded frame, so it will not be preloaded again
					for (var i: int = 0; i < total; i++)
					{
						var viewProperties: WMSViewProperties = preloadingData.getItemAt(i) as WMSViewProperties;
						preloadViewData(viewProperties);
					}
				}
			}

			/**
			 * Capabilities are received
			 */
			private function onCapabilitiesReceived(event: GetCapabilitiesEvent): void
			{
				b_getCapabilitiesReceived = true;
				//get forecast values from temperature layer, to have them to be able to change temperature frame on slider change
				getForecastValues();
				if (m_temperatureLayerLoaded)
				{
					//if user wants to preload frames already, now you can preload it (because we have forecast values parsed)
					preloadAllFramesAfterCapabilitiesReceived();
				}
				else
				{
					//wait for loading temperature layer first and then preload other frames
				}
			}
			private var m_temperatureLayerLoaded: Boolean;

			private function onTemperatureLayerLoadingStarted(event: InteractiveLayerEvent): void
			{
				m_temperatureLayerLoaded = false;
//				preloadingFramesCount++;
				trace("\nonTemperatureLayerLoadingStarted autoPlayPaused: " + autoPlayPaused + " preloadingFramesCount: " + preloadingFramesCount);
			}

			private function onTemperatureLayerLoadingFinished(event: InteractiveLayerEvent): void
			{
				m_temperatureLayerLoaded = true;
				if (b_getCapabilitiesReceived)
					preloadAllFramesAfterCapabilitiesReceived();
				/// need to update frames on next frame (frame wil be cached in cache)
				callLater(updateProgressAfterFrameLoadingFinished);
				trace("onTemperatureLayerLoadingFinished autoPlayPaused: " + autoPlayPaused + " autoPlayEnabled: " + autoPlayEnabled + " preloadingFramesCount: " + preloadingFramesCount + " preloadedFramesCount: " + preloadedFramesCount + "\n");
				continueWithAutoPlayIfPossible();
			}

			private function onTemperatureLayerPreloadingStarted(event: InteractiveLayerEvent): void
			{
				trace("FRAMES PRELOADING HAS STARTED");
			}

			private function onTemperatureLayerPreloadingFinished(event: InteractiveLayerEvent): void
			{
				//check if preloading is done
				var allFramesArePreloaded: Boolean = false;
				
				if (USE_PROGRESS_EVENT)
				{
					//we are in mode of preloading all 8 frames at once 
					allFramesArePreloaded = true;
				} else {
					if (_currentPreloadingPosition == (preloadingData.length - 1))
					{
						//all frames was preloadd in this mode, so preloading of all frames are finished
						allFramesArePreloaded = true;
					}
				}
				
				if (allFramesArePreloaded)
				{
					//all frames are preloaded
					trace("ALL FRAMES ARE PRELOADED");
					b_framesArePreloading = false;
					b_framesArePreloaded = true;
					notifyPreloadingChange();
					//we are finished, update to first frame
					changeFrame(0);
				} else {
					
					//check if data is preloaded
					m_layerTemperature.isPreloaded(preloadingData.getItemAt(_currentPreloadingPosition) as IViewProperties);
					
					//do the same if progress event would be dispatched
					onTemperatureLayerProgress();
					
					//and preload next frame
					_currentPreloadingPosition++;
					preloadDataAtPosition(_currentPreloadingPosition);
				}
			}

			private function updateProgressAfterFrameLoadingFinished(): void
			{
				preloadingFramesCount--;
//				trace("updateProgressAfterFrameLoadingFinished preloadingFramesCount: " + preloadingFramesCount);
				//check how many frames are preloaded on temperature layer
				preloadedFramesCount = getCachedFramesCount();
				//frame was preloaded, so we can increment preloadedFramesCount
				updateTotalProgress();
			}

			/**
			 * display preloading of temperature layer progress (frames already preloaded / all preloading frames)
			 */
			private function onTemperatureLayerProgress(event: InteractiveLayerProgressEvent = null): void
			{
				updateTotalProgress();
				if (preloadedFramesCount >= maxFrames)
				{
					b_framesArePreloading = false;
					b_framesArePreloaded = true;
					notifyPreloadingChange();
				}
				continueWithAutoPlayIfPossible();
			}

			/**
			 * Returns amount of already cached frames
			 */
			private function getCachedFramesCount(): int
			{
				var cachedCount: int = 0;
//				trace("getCachedFramesCount preloadingData: " + preloadingData.length)
				for each (var wmsViewProperties: WMSViewProperties in preloadingData)
				{
					var isCached: Boolean = m_layerTemperature.isPreloaded(wmsViewProperties);
					if (isCached)
					{
//						trace("\t getCachedFramesCount cached: " + wmsViewProperties.getWMSDimensionValue('FORECAST'))
						cachedCount++;
					}
				}
//				trace("\t getCachedFramesCount cachedCount: " + cachedCount)
				return cachedCount;
			}

			private function updateTotalProgress(): void
			{
				preloadedFramesCount = getCachedFramesCount();
				totalProgress.setProgress(preloadedFramesCount, maxFrames);
				totalProgress.label = "Preloaded frames: " + preloadedFramesCount + " from " + maxFrames + " frames";
			}

			private function getViewData(forecast: String): IViewProperties
			{
				var currViewData: WMSViewProperties = m_layerTemperature.currentViewProperties as WMSViewProperties;
				if (currViewData)
				{
					//clone current view properties from temperature layer
					var preloadingViewData: IViewProperties = currViewData.clone() as IViewProperties;
					var wmsPreloadingViewData: WMSViewProperties = preloadingViewData as WMSViewProperties;
					//and set FORECAST for this view properties
					wmsPreloadingViewData.setWMSDimensionValue('FORECAST', forecast);
					return wmsPreloadingViewData;
				}
				return null;
			}

			private function preloadViewData(preloadingViewData: WMSViewProperties): void
			{
				//and preload it
				m_layerTemperature.preload(preloadingViewData);
			}

			/**
			 * Main function for changing frame for temperature layer. It's called from user interaction on slider, or byt auto play animation
			 */
			private function changeFrame(currPos: int): void
			{
				if (!preloadingData)
					return;
				if (currPos >= 0 && currPos < preloadingData.length)
				{
					var preloadingViewData: IViewProperties = preloadingData.getItemAt(currPos) as IViewProperties;
					var wmsPreloadingViewData: WMSViewProperties = preloadingViewData as WMSViewProperties;
					var forecast: String = wmsPreloadingViewData.getWMSDimensionValue('FORECAST') as String;
					currentTime = forecast; // ISO8601Parser.dateToString( value as Date );
					var isPreloaded: Boolean = m_layerTemperature.isPreloaded(wmsPreloadingViewData);
					trace("Example 6 changeFrame currentTime: " + currentTime + " isPreloaded: " + isPreloaded);
					if (!isPreloaded)
					{
						preloadViewData(wmsPreloadingViewData);
						if (autoPlayTimer && autoPlayTimer.running)
						{
							if (!isNextFramePreloaded())
							{
								//stop timer
								pauseAutoPlay();
							}
						}
					}
					m_layerTemperature.changeViewProperties(wmsPreloadingViewData);
					//there must be "false" value, otherwise it will not check cached bitmaps
					m_layerTemperature.refresh(false);
				}
			}

			/**
			 * Function is called when slider is changed by user interaction
			 */
			protected function frameChangeHandler(event: Event): void
			{
				var slider: HSlider = event.target as HSlider;
					
				var currPos: int = slider.value - 1;
				changeFrame(currPos);
			}

			protected function isNextFramePreloaded(): Boolean
			{
				var currPos: int = sliderFrame.value;
				var nextFramePos: int = currPos + 1;
				if (nextFramePos >= preloadingData.length)
					nextFramePos = 0;
				var preloadingViewData: IViewProperties = preloadingData.getItemAt(nextFramePos) as IViewProperties;
				var isPreloaded: Boolean = m_layerTemperature.isPreloaded(preloadingViewData);
				return isPreloaded;
			}

			private function continueWithAutoPlayIfPossible(): void
			{
				if (autoPlayPaused && autoPlayEnabled && isNextFramePreloaded())
				{
					//auto play was just pause, continue with autoplay
					autoPlayPaused = false;
					startAutoPlay(true);
				}
			}
			
			private function notifyPreloadingChange(): void
			{
				dispatchEvent(new Event("preloadingChanged"));
			}
		]]>
	</fx:Script>
</s:Application>
