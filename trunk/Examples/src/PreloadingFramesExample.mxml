<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
				xmlns="*"
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingLeft="10"
			  paddingRight="10">
		<s:HGroup id="hboxCaption" width="100%" verticalAlign="middle">
			<s:Label 
				text="This example demonstrates preloading of frames for WMS Temperature layer for smooth animation."/>
			<s:Label id="labelProgress" textAlign="right" fontWeight="bold"/>
		</s:HGroup>
		<!--<mx:HBox width="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Button label="Preload all frames" click="preloadAllFrames()"
					  enabled="{!b_framesArePreloaded &amp;&amp; !b_framesArePreloading}"/>
			
			<s:Button label="Clear cache" click="clearCache()" enabled="{!b_framesArePreloading}"/>
			<s:ToggleButton label="Use tiled layer" enabled="{!b_framesArePreloading}"
							click="useTiledLayer((event.currentTarget as ToggleButton).selected)"
							selected="{m_createTiledLayers}"/>
			<s:ToggleButton label="Auto play"
							click="autoPlay((event.currentTarget as ToggleButton).selected)"
							selected="{autoPlayEnabled}"/>
			
		</mx:HBox>-->
		<!--<mx:HBox width="100%" verticalAlign="middle" horizontalAlign="left">
			<mx:Label textAlign="right" fontWeight="bold" text="Frames:" width="{labelWidth}"/>
			<mx:HSlider id="sliderFrame" width="500" minimum="0" maximum="{maxFrames}"
						snapInterval="1" enabled="{!autoPlayEnabled}" liveDragging="true"
						showDataTip="true" change="frameChangeHandler(event)"/>
			<mx:Label textAlign="right" fontWeight="bold" text="Time: {currentTime}"/>
		</mx:HBox>-->
		<mx:HBox width="100%" verticalAlign="middle" horizontalAlign="left">
			<!--<mx:Label textAlign="right" fontWeight="bold" text="Total Preloading progress:"
					  width="{labelWidth}"/>-->
			<mx:ProgressBar id="totalProgress" width="500" height="20" mode="manual"
							labelPlacement="center" label="Preloading frames"/>
		</mx:HBox>
		<widgets:InteractiveWidget id="m_iw" width="100%" height="100%">
			<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1"/>
			<widgets:InteractiveLayerPan id="m_ilp" zOrder="2"/>
		</widgets:InteractiveWidget>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.FlexiWeatherConfiguration;
			import com.iblsoft.flexiweather.events.InteractiveLayerEvent;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.data.viewProperties.IViewProperties;
			import com.iblsoft.flexiweather.ogc.data.viewProperties.WMSViewProperties;
			import com.iblsoft.flexiweather.ogc.events.GetCapabilitiesEvent;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerTiled;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
			import com.iblsoft.flexiweather.proj.Projection;
			import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
			import com.iblsoft.flexiweather.widgets.InteractiveDataLayer;
			import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			public static const PRELOADINGFRAMESCOUNT_CHANGE_EVENT: String = "preloadingFramesCountChange";
			public static const PRELOADEDFRAMESCOUNT_CHANGE_EVENT: String = "preloadedFramesCountChange";
			
			// you can limit maximum of loading (and preloading) frames
			public static const MAX_FRAMES_ANIMATED: int = 2;
			
			[Bindable]
			public var maxFrames: int;
			
			/**
			 * how many frames are already preloaded
			 */
			private var _preloadedFramesCount: int = 0;
			
			[Bindable(event = "preloadedFramesCountChange")]
			public function get preloadedFramesCount(): int
			{
				return _preloadedFramesCount;
			}
			
			public function set preloadedFramesCount(value: int): void
			{
				if (_preloadedFramesCount != value)
				{
					_preloadedFramesCount = value;
					dispatchEvent(new Event(PRELOADEDFRAMESCOUNT_CHANGE_EVENT));
				}
			}
			
			/**
			 * array of forecast string values from capabilities request. We need it for slider to change FORECAST dimension of temperature layer
			 */
			[Bindable]
			private var preloadingData: ArrayCollection;
			
			private var m_layerTemperature: InteractiveLayerWMSWithQTT;
			
			/**
			 * Initialization of example. Temperature layer creation, call get capabilities
			 */
			override protected function onCreationComplete(event: FlexEvent): void
			{
				super.onCreationComplete(event);
				
				preloadingData = new ArrayCollection();
				InteractiveLayerTiled.drawBorders = true;
				InteractiveLayerTiled.drawDebugText = true;
				
				Projection.addCRSByProj4("ESRI:54004", "+title=World Mercator +proj=merc +lat_ts=0 +lon_0=0 +k=1.000000 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102018", "+title=North Pole Stereographic +proj=stere +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102021", "+title=South Pole Stereographic +proj=stere +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				
				m_iw.setCRSExtentAndViewBBox('EPSG:900913');
				
//				addLayer('dem', 1);
				m_layerTemperature = addLayer('temperature', 1) as InteractiveLayerWMSWithQTT;
//				addLayer('foreground', 1);
				
				getAllServicesCapabilities();
				
				
				if (Capabilities.playerType == "Desktop")
					BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(labelProgress);
				else
				{
					BackgroundJobManager.getInstance().createDefaultPreloader();
					BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
				}
				

				if (FlexiWeatherConfiguration.FLEXI_WEATHER_LOADS_GET_CAPABILITIES)
					m_layerTemperature.addEventListener(GetCapabilitiesEvent.CAPABILITIES_RECEIVED, onCapabilitiesReceived);
				else
					onCapabilitiesReceived();
				
				setInterval(updateTotalProgress, 500);
			}
			
			private function updateTotalProgress(): void
			{
				preloadedFramesCount = getCachedFramesCount();
				totalProgress.setProgress(preloadedFramesCount, maxFrames);
				totalProgress.label = "Preloaded frames: " + preloadedFramesCount + " from " + maxFrames + " frames";
			}
			
			/**
			 * Returns amount of already cached frames
			 */
			private function getCachedFramesCount(): int
			{
				var cachedCount: int = 0;
				//				trace("getCachedFramesCount preloadingData: " + preloadingData.length)
				for each (var wmsViewProperties: WMSViewProperties in preloadingData)
				{
					var isCached: Boolean = m_layerTemperature.isPreloaded(wmsViewProperties);
					if (isCached)
					{
						//						trace("\t getCachedFramesCount cached: " + wmsViewProperties.getWMSDimensionValue('FORECAST'))
						cachedCount++;
					}
				}
				//				trace("\t getCachedFramesCount cachedCount: " + cachedCount)
				return cachedCount;
			}
			
			protected function onCapabilitiesReceived(event: Event = null): void
			{
				trace("FlexiWeatherTemplate onCapabilitiesUpdated");
				
				var service: WMSServiceConfiguration = getWMSLayerConfiguration('gfs');
				preloadAllFrames();
			}
			
			private function preloadAllFrames(): void
			{
				var framesData: Array = getForecastValues();
				m_layerTemperature.addEventListener(InteractiveDataLayer.PRELOADING_FINISHED, onPreloadingFinished);
				m_layerTemperature.preloadMultiple(framesData);
			}
			
			private function onPreloadingFinished(event: InteractiveLayerEvent): void
			{
				trace("onPreloadingFinished");
			}
			
			private function filterFramesCount(arr: Array, total: int): Array
			{
				var result: Array = [];
				var total: int = Math.min(arr.length, total);
				for (var i: int = 0; i < total; i++)
				{
					result.push(arr[i]);
				}
				return result;
			}
			/**
			 * Get all FORECAST value string from Temperature layer. It must be called after capabilities are receiverd and parsed
			 */
			private function getForecastValues(): Array
			{
				
				
				var dimNames: Array = filterFramesCount(m_layerTemperature.getWMSDimensionsNames(), MAX_FRAMES_ANIMATED);
				var dimValues: Array = filterFramesCount(m_layerTemperature.getWMSDimensionsValues('FORECAST'), MAX_FRAMES_ANIMATED);
				if (dimValues)
				{
					maxFrames = dimValues.length;
					var currViewData: WMSViewProperties = m_layerTemperature.currentViewProperties as WMSViewProperties;
					var total: int = dimValues.length;
//					var preloadingData: Array = new Array();
					preloadingData.removeAll();
					//0th item is currently loaded frame, so it will not be preloaded again
					for (var i: int = 0; i < total; i++)
					{
						var dimValue: Object = dimValues[i] as Object;
						//store viewProperties for each frame
						var frameViewProperties: WMSViewProperties = getViewData(dimValue.value) as WMSViewProperties;
//						preloadingData.push(frameViewProperties);
						preloadingData.addItem(frameViewProperties);
					}
					return preloadingData.source;					
				}
				return null;
			}
			
			private function getViewData(forecast: String): IViewProperties
			{
				var currViewData: WMSViewProperties = m_layerTemperature.currentViewProperties as WMSViewProperties;
				if (currViewData)
				{
					//clone current view properties from temperature layer
					var preloadingViewData: IViewProperties = currViewData.clone() as IViewProperties;
					var wmsPreloadingViewData: WMSViewProperties = preloadingViewData as WMSViewProperties;
					//and set FORECAST for this view properties
					wmsPreloadingViewData.setWMSDimensionValue('FORECAST', forecast);
					return wmsPreloadingViewData;
				}
				return null;
			}
		]]>
	</fx:Script>
</FlexiWeatherTemplate>