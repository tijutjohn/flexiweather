<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns="*" xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
		xmlns:utils="com.iblsoft.utils.*">
	<fx:Declarations>

		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="2" paddingTop="10" paddingBottom="10"
			paddingLeft="10" paddingRight="10">
		<s:HGroup width="100%" id="hboxCaption">
			<s:CheckBox id="m_showLegendCheckBox" selected="false" label="Show legend"/>
			<s:Spacer width="100%"/>
			<s:Label id="m_labelProgress" textAlign="right" fontWeight="bold"/>
		</s:HGroup>
		<s:TextArea id="m_legendTextArea" height="150" width="100%" editable="false"
				visible="{m_showLegendCheckBox.selected}"
				includeInLayout="{m_showLegendCheckBox.selected}"/>
		<s:HGroup width="100%" height="100%">
			<widgets:InteractiveWidget id="m_iw" width="100%" height="100%"
					contentBackgroundAlpha="0">
				<widgets:InteractiveLayerZoom id="m_ilzoom" zOrder="1"/>
				<widgets:InteractiveLayerPan id="m_ilpan" zOrder="2"/>
				<utils:InteractiveLayerPoint id="m_ilpoint" zOrder="3"/>
			</widgets:InteractiveWidget>
			<s:VGroup height="100%">
				<s:HGroup verticalAlign="middle">
					<s:Label text="Use case:"/>
					<s:DropDownList id="m_useCaseComboBox" dataProvider="{ma_useCases}"
							change="onSelectedUseCaseChanged()"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="Run:"/>
					<s:DropDownList id="m_runComboBox" dataProvider="{ma_runs}"
							change="onSelectedRunChanged()"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" width="100%">
					<s:Label text="Validity from:"/>
					<s:Spacer width="100%"/>
					<s:TextInput id="m_validityFromInput" restrict="0123456789\.\-: "
							maxChars="16" change="onValidityFromChanged()"/>
				</s:HGroup>
				<s:HGroup verticalAlign="middle" width="100%">
					<s:Label text="Validity to:"/>
					<s:Spacer width="100%"/>
					<s:TextInput id="m_validityToInput" restrict="0123456789\.\-: " maxChars="16"
							change="onValidityToChanged()"/>
				</s:HGroup>
				<s:Spacer height="20"/>
				<s:HGroup verticalAlign="middle"
						visible="{m_useCaseComboBox.selectedItem.value==USE_CASE_PARAMETER_VALUES}"
						includeInLayout="{m_useCaseComboBox.selectedItem.value==USE_CASE_PARAMETER_VALUES}">

					<!--s:Label text="Visibility threshold:"/>
					<s:NumericStepper id="m_visibilityThresholdStepper" value="5"
									  stepSize="1" minimum="0" maximum="50" /-->
					<s:Label text="Relative humidity threshold:"/>
					<s:NumericStepper id="m_relativeHumidityThresholdStepper" value="80"
							stepSize="1" minimum="0" maximum="99"/>
				</s:HGroup>
				<s:Button label="Compute" id="m_computeButton" click="compute()"/>
				<s:TextArea id="m_resultTextArea" height="100%" width="100%" editable="false"
						textFlow="{spark.utils.TextFlowUtil.importFromString(ms_results)}"/>
			</s:VGroup>
		</s:HGroup>
		<s:TextArea id="m_requestsTextArea" editable="false" text="@{ms_requests}" height="20%"
				width="100%" valueCommit="onRequestAdded()"
				visible="{m_showRequestsCheckBox.selected}"
				includeInLayout="{m_showRequestsCheckBox.selected}"/>
		<s:CheckBox id="m_showRequestsCheckBox" selected="false" label="Show requests"/>
	</s:VGroup>
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.net.events.UniURLLoaderErrorEvent;
			import com.iblsoft.flexiweather.net.events.UniURLLoaderEvent;
			import com.iblsoft.flexiweather.net.loaders.JSONLoader;
			import com.iblsoft.flexiweather.net.loaders.XMLLoader;
			import com.iblsoft.flexiweather.ogc.CRSWithBBox;
			import com.iblsoft.flexiweather.ogc.CRSWithBBoxAndTilingInfo;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerMSBase;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.utils.DateUtils;
			import com.iblsoft.flexiweather.utils.Duration;
			import com.iblsoft.flexiweather.utils.ISO8601Parser;
			import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
			import com.iblsoft.flexiweather.widgets.InteractiveLayer;
			import com.iblsoft.flexiweather.widgets.InteractiveLayerMap;
			import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;
			import com.iblsoft.utils.InteractiveLayerPolygons;
			import mx.charts.chartClasses.DataDescription;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import spark.utils.TextFlowUtil;
			private var m_jsonLoader: JSONLoader;
			private var m_xmlLoader: XMLLoader;
			[Bindable]
			private var ma_runs: ArrayCollection = new ArrayCollection();
			[Bindable]
			private var ma_forecasts: ArrayCollection = new ArrayCollection();
			private var m_run: Date = null;
			private var m_forecast: Duration = null;
			[Bindable]
			private var m_validityFrom: Date = null;
			[Bindable]
			private var m_validityTo: Date = null;
			private var ma_gridPointValues: ArrayCollection = new ArrayCollection;
			[Bindable]
			private var ms_results: String = "";
			[Bindable]
			private var ms_requests: String = "";
			private var ms_coverageName: String = "relative-humidity";
			//private var ms_coverageName: String = "visibility";
			private var ms_level: String = "2m";
			//private var ms_level: String = "gnd-surf";
			[Bindable]
			private var ma_useCases: ArrayCollection = new ArrayCollection();
			private const REQUEST_AREA_VALUE: String = "area-value";
			private const REQUEST_GRID_VALUE: String = "grid-value";
			private const LEGEND: String = "This example demonstrates capability of WCS to cover the following " +
					"use cases:<br/>" +
					"1) Obtain a forecast <span fontWeight='bold'> time series of a parameter at a point</span> " +
					//"(forecast visibility is used in this example).<br/>" +
					"(forecast relative humidity is used in this example).<br/>" +
					"2) Obtain a forecast <span fontWeight='bold'> time series of the probability of a parameter " +
					"at a point exceeding a given threshold</span> (probability that total cloud coverage is &lt;=3/8 is " +
					"used in this example).<br/>" +
					"<span fontWeight='bold'>Usage:</span><br/>" +
					"1) Select the use case.<br/>" +
					"2) Click a point on the map.<br/>" +
					"3) Select run and validity period.<br/>" +
					"4) Click the 'Compute' button.<br/>" +
					"5) Results for the selected point are displayed in the text area in bottom right. " +
					"Note that you can configure the threshold value in the first use case that is used " +
					"for highlighting of high values.";
			private const DATE_TIME_FORMAT: String = "%d.%m.%Y %H:%M";
			private const USE_CASE_PARAMETER_VALUES: String = "parameter-values";
			private const USE_CASE_THRESHOLD_PROBABILITY: String = "threshold-probability";
			//private const WCS_URL: String = "http://palo:8008/test";
			private const WCS_URL: String = "http://wms.iblsoft.com/gfs";

			/**
			 * Initialization of example.
			 */
			override protected function onCreationComplete(event: FlexEvent): void
			{
				super.onCreationComplete(event);
				var ilm: InteractiveLayerMap = new InteractiveLayerMap(m_iw);
				m_iw.addLayer(ilm);
				m_ilpoint.container = m_iw;
				m_iw.setCRSExtentAndViewBBox('CRS:84');
				var ilBkg: InteractiveLayerMSBase = addLayer('dem', 1);
				ilBkg.setWMSStyleName(0, 'white-colours');
				scm.update(scm.getAllServicesNames());
				if (Capabilities.playerType == "Desktop")
					BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(m_labelProgress);
				else
				{
					BackgroundJobManager.getInstance().createDefaultPreloader();
					BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
				}
				m_jsonLoader = new JSONLoader();
				m_jsonLoader.addEventListener(UniURLLoaderErrorEvent.DATA_LOAD_FAILED, onDataLoadedFailed);
				m_jsonLoader.addEventListener(UniURLLoaderEvent.DATA_LOADED, onCoverageDataLoaded);
				m_xmlLoader = new XMLLoader();
				m_xmlLoader.addEventListener(UniURLLoaderErrorEvent.DATA_LOAD_FAILED, onDataLoadedFailed);
				m_xmlLoader.addEventListener(UniURLLoaderEvent.DATA_LOADED, onDescribeCoverageDataLoaded);
				m_legendTextArea.textFlow = spark.utils.TextFlowUtil.importFromString(LEGEND);
				m_ilpoint.setPoint(new Coord("CRS:84", 0, 52));
				ma_useCases.addItem({"label": "Time series of parameter values", "value": USE_CASE_PARAMETER_VALUES});
				ma_useCases.addItem({"label": "Time series of threshold probability", "value": USE_CASE_THRESHOLD_PROBABILITY});
				m_useCaseComboBox.selectedIndex = 0;
				m_useCaseComboBox.typicalItem = ma_useCases.getItemAt(1);
				loadAvailableRuns();
			}

			private function loadAvailableRuns(): void
			{
				var request: URLRequest = new URLRequest(WCS_URL);
				request.method = URLRequestMethod.GET;
				var requestParams: URLVariables = new URLVariables();
				requestParams["SERVICE"] = "WCS";
				requestParams["VERSION"] = "1.0.0";
				requestParams["REQUEST"] = "DescribeCoverage";
				requestParams["COVERAGE"] = ms_coverageName;
				request.data = requestParams;
				logRequest(request);
				m_xmlLoader.load(request);
			}

			private function onValidityFromChanged(): void
			{
				var newValidityFrom: Date = DateUtils.strptime(m_validityFromInput.text, DATE_TIME_FORMAT);
				if (!isNaN(newValidityFrom.time))
					m_validityFrom = newValidityFrom;
			}

			private function onValidityToChanged(): void
			{
				var newValidityTo: Date = DateUtils.strptime(m_validityToInput.text, DATE_TIME_FORMAT);
				if (!isNaN(newValidityTo.time))
					m_validityTo = newValidityTo;
			}

			private function normalizeValidityInput(): void
			{
				m_validityFromInput.text = DateUtils.strftime(m_validityFrom, DATE_TIME_FORMAT);
				m_validityToInput.text = DateUtils.strftime(m_validityTo, DATE_TIME_FORMAT);
			}

			private function onDataLoadedFailed(event: UniURLLoaderErrorEvent): void
			{
				trace("onDataLoadedFailed");
				Alert.show("Problem loading request", "Error", Alert.OK);
			}

			private function onDescribeCoverageDataLoaded(event: UniURLLoaderEvent): void
			{
				ma_runs.removeAll();
				var wcs: Namespace = new Namespace("http://www.opengis.net/wcs");
				var xmlResult: XML = event.result as XML;
				var xmlAxisDescription: XMLList = xmlResult.wcs::CoverageOffering.wcs::rangeSet.wcs::RangeSet.wcs::axisDescription.wcs::AxisDescription;
				var xmlRunValues: XMLList = xmlAxisDescription.(wcs::name == "DIM_RUN").wcs::values;
				var xmlRunInterval: XMLList = xmlRunValues.wcs::interval;
				var xmlMinRun: XMLList = xmlRunInterval.wcs::min;
				var xmlMaxRun: XMLList = xmlRunInterval.wcs::max;
				var runItem: Object;
				if ((xmlMinRun.length() > 0) && (xmlMaxRun.length() > 0))
				{
					var s_minRun: String = xmlRunInterval.wcs::min[0].text();
					var s_maxRun: String = xmlRunInterval.wcs::max[0].text();
					var s_runResolution: String = xmlRunInterval.wcs::res[0].text();
					var minRun: Date = ISO8601Parser.stringToDate(s_minRun);
					var maxRun: Date = ISO8601Parser.stringToDate(s_maxRun);
					var runResolution: Duration = ISO8601Parser.stringToDuration(s_runResolution);
					var currentRun: Date = minRun;
					while (currentRun <= maxRun)
					{
						runItem = new Object();
						runItem["value"] = new Date(currentRun);
						runItem["label"] = DateUtils.strftime(currentRun, "%d.%m.%Y %H:%M");
						ma_runs.addItemAt(runItem, 0);
						currentRun.hours += runResolution.hoursTotal;
					}
				}
				else
				{
					for each (var xmlSingleValue: XML in xmlRunValues.wcs::singleValue)
					{
						var s_run: String = xmlSingleValue.toString();
						runItem = new Object();
						runItem["value"] = ISO8601Parser.stringToDate(s_run);
						runItem["label"] = DateUtils.strftime(runItem["value"], "%d.%m.%Y %H:%M");
						ma_runs.addItem(runItem);
					}
				}
				if (ma_runs.length > 0)
				{
					m_runComboBox.selectedIndex = 0;
					m_runComboBox.typicalItem = ma_runs.getItemAt(0);
					m_run = ma_runs.getItemAt(0)["value"] as Date;
				}
				var xmlForecastValues: XMLList = xmlAxisDescription.(wcs::name == "DIM_FORECAST").wcs::values;
				var xmlForecastInterval: XMLList = xmlForecastValues.wcs::interval;
				var xmlMinForecast: XMLList = xmlForecastInterval.wcs::min;
				var xmlMaxForecast: XMLList = xmlForecastInterval.wcs::max;
				var forecastItem: Object;
				if ((xmlMinForecast.length() > 0) && (xmlMaxForecast.length() > 0))
				{
					var s_minForecast: String = xmlForecastInterval.wcs::min[0].text();
					var s_maxForecast: String = xmlForecastInterval.wcs::max[0].text();
					var s_forecastResolution: String = xmlForecastInterval.wcs::res[0].text();
					var minForecast: Duration = ISO8601Parser.stringToDuration(s_minForecast);
					var maxForecast: Duration = ISO8601Parser.stringToDuration(s_maxForecast);
					var forecastResolution: Duration = ISO8601Parser.stringToDuration(s_forecastResolution);
					var currentForecast: Duration = minForecast;
					while (currentForecast.secondsTotal <= maxForecast.secondsTotal)
					{
						forecastItem = new Object();
						forecastItem["value"] = new Duration(currentForecast.secondsTotal);
						forecastItem["label"] = currentForecast.toHoursString();
						ma_forecasts.addItem(forecastItem);
						currentForecast.add(forecastResolution);
					}
				}
				else
				{
					for each (xmlSingleValue in xmlForecastValues.wcs::singleValue)
					{
						var s_forecast: String = xmlSingleValue.toString();
						forecastItem = new Object();
						forecastItem["value"] = ISO8601Parser.stringToDuration(s_forecast);
						forecastItem["label"] = (forecastItem["value"] as Duration).toHoursString();
						ma_forecasts.addItem(forecastItem);
					}
				}
				if (run && (ma_forecasts.length > 0))
				{
					// set default validity
					m_validityFrom = new Date(run);
					var forecast: Duration = ma_forecasts[0]["value"] as Duration;
					m_validityFrom.hours += forecast.hoursTotal;
					m_validityFromInput.text = DateUtils.strftime(m_validityFrom, DATE_TIME_FORMAT);
					m_validityTo = new Date(run);
					forecast = ma_forecasts[ma_forecasts.length - 1]["value"] as Duration;
					m_validityTo.hours += forecast.hoursTotal;
					m_validityToInput.text = DateUtils.strftime(m_validityTo, DATE_TIME_FORMAT);
				}
			}

			private function setRun(r: Date): void
			{
				m_run = r;
				//updateValidity();
			}

			[Bindable(event = "runChanged")]
			public function get run(): Date
			{
				return m_run;
			}

			private function onSelectedRunChanged(): void
			{
				setRun(m_runComboBox.selectedItem["value"]);
			}

			private function getSelectedUseCase(): String
			{
				return m_useCaseComboBox.selectedItem["value"] as String;
			}

			private function onSelectedUseCaseChanged(): void
			{
				if (getSelectedUseCase() == USE_CASE_PARAMETER_VALUES)
				{
					//ms_coverageName = "visibility";
					//ms_level = "gnd-surf";
					ms_coverageName = "relative-humidity";
					ms_level = "2m";
				}
				else
				{
					ms_coverageName = "total-cloud-cover-below-3oct";
					ms_level = "atmosphere";
				}
				loadAvailableRuns();
			}

			private function onCoverageDataLoaded(event: UniURLLoaderEvent): void
			{
				var result: Object = event.result;
				var a_coverageData: Array = result["coverageData"] as Array;
				if (getSelectedUseCase() == USE_CASE_PARAMETER_VALUES)
				{
					//ms_results = "Visibility for location <span fontWeight='bold'>" + m_ilpoint.getPoint().toNiceString() + "</span><br/>";
					ms_results = "Relative humidity for location <span fontWeight='bold'>" + m_ilpoint.getPoint().toNiceString() + "</span><br/>";
				}
				else
					ms_results = "Probability that total cloud coverage is &lt;=3/8 for location <span fontWeight='bold'>" + m_ilpoint.getPoint().toNiceString() + "</span><br/>";
				for each (var coverageItem: Object in a_coverageData)
				{
					var validity: Date = ISO8601Parser.stringToDate(coverageItem["validity"] as String);
					var a_rows: Array = coverageItem["values"] as Array;
					if (a_rows.length == 1)
					{
						var a_values: Array = a_rows[0] as Array;
						if (a_values.length == 1)
						{
							if (a_values[0] == null)
								continue;
							var f_valueOriginal: Number = a_values[0] as Number;
							var f_value: Number;
							var s_color: String;
							var s_unit: String;
							if (getSelectedUseCase() == USE_CASE_PARAMETER_VALUES)
							{
								//f_value = f_valueOriginal / 1000;
								f_value = f_valueOriginal;
								//if (f_value >= m_visibilityThresholdStepper.value)
								if (f_value <= m_relativeHumidityThresholdStepper.value)
									s_color = "#0000ff";
								else
									s_color = "#ff0000";
								//s_unit = " km"
								s_unit = "%"
							}
							else
							{
								f_value = f_valueOriginal;
								s_color = "#0000ff";
								s_unit = "%"
							}
							ms_results += DateUtils.strftime(validity, DATE_TIME_FORMAT) + ": " +
									"<span color='" + s_color + "' fontWeight='bold'>" + f_value.toFixed(1) +
									"</span><span color='" + s_color + "'>" + s_unit + "</span><br/>";
						}
					}
				}
			}

			private function compute(): void
			{
				normalizeValidityInput();
				var request: URLRequest = new URLRequest(WCS_URL);
				request.method = URLRequestMethod.GET;
				var requestParams: URLVariables = new URLVariables();
				requestParams["SERVICE"] = "WCS";
				requestParams["VERSION"] = "1.0.0";
				requestParams["REQUEST"] = "GetCoverage";
				requestParams["CRS"] = "CRS:84";
				requestParams["FORMAT"] = "JSON";
				requestParams["COVERAGE"] = ms_coverageName;
				requestParams["DIM_RUN"] = ISO8601Parser.dateToString(run);
				requestParams["TIME"] = ISO8601Parser.dateToString(m_validityFrom) + "/" +
						ISO8601Parser.dateToString(m_validityTo);
				requestParams["ELEVATION"] = ms_level;
				var coord: Coord = m_ilpoint.getPoint();
				requestParams["BBOX"] = coord.x.toString() + "," + coord.y.toString() + ","
						+ coord.x.toString() + "," + coord.y.toString();
				request.data = requestParams;
				logRequest(request);
				m_jsonLoader.load(request, REQUEST_GRID_VALUE, "Get computed values from web service.");
			}

			private function logRequest(request: URLRequest): void
			{
				var requestParams: URLVariables = request.data as URLVariables;
				var now: Date = new Date();
				ms_requests += DateUtils.strftime(now, "%Y-%m-%d %H:%M:%SZ") + "\n" + request.url + "?" +
						requestParams.toString().split("%2D").join("-").split("%5F").join("_").split("%2E").join(".")
						.split("%28").join("(").split("%29").join(")").split("%3B").join(";").split("%3A").join(":")
						.split("%3E").join(">").split("%3C").join("<").split("%3D").join("=").split("%2C").join(",") + "\n";
			}

			private function onRequestAdded(): void
			{
				m_requestsTextArea.scrollToRange(m_requestsTextArea.text.length - 1, m_requestsTextArea.text.length);
			}
		]]>
	</fx:Script>
</FlexiWeatherTemplate>
