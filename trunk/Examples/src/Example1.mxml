<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
		creationComplete="onCreationComplete(event)" paddingTop="2" paddingBottom="2"
		paddingRight="2" paddingLeft="2" xmlns:layers="com.iblsoft.flexiweather.ogc.configuration.layers.*" xmlns:ogc="com.iblsoft.flexiweather.ogc.*"
		xmlns:tiling="com.iblsoft.flexiweather.ogc.tiling.*">
	
	
	<fx:Declarations>
		<layers:QTTMSLayerConfiguration id="qttmsConfig1"/>
		<layers:WMSWithQTTLayerConfiguration id="lcqtBackground" service="{serviceRIA}" label="Backgrounds/DEM" layerNames="['background-dem']" />
		<layers:WMSWithQTTLayerConfiguration id="lcqtForeground" service="{serviceRIA}" label="Foreground" layerNames="['foreground-lines']" />
		<layers:WMSLayerConfiguration id="lcqtSurface" service="{serviceOBS}" label="Surface" layerNames="['surface']" 
											 autoRefreshPeriod="30"/>
	</fx:Declarations>	
	
	
	<s:HGroup id="hboxCaption" width="100%" verticalAlign="middle">
		<s:Label 
				text="This example demonstrates basic OpenGIS WMS functionality including tiling with custom WMS dimensions support,&#xa;zooming, panning, change of projection reference system and data layer autorefresh."/>
		<s:Label id="labelProgress" textAlign="right" fontWeight="bold"/>
	</s:HGroup>
	
	<s:HGroup id="hboxProgress" width="100%" verticalAlign="middle">
		<s:Label textAlign="right" fontWeight="bold" text="Open Street Map tiles progress:"/>
		<mx:ProgressBar id="qttProgress" width="100" mode="manual"/>
		<s:Label textAlign="right" fontWeight="bold" text="Surface observations progress:"/>
		<mx:ProgressBar id="surfaceProgress" width="100" mode="manual"/>
	</s:HGroup>
	
	<s:HGroup id="hboxMenu" width="100%" verticalAlign="middle">
		<s:Label text="Tools:"/>
		<s:ToggleButton label="Zoom (Ctrl)" selected="{!m_ilz.requireCtrlKey}"
				click="m_ilp.requireShiftKey = true; m_ilz.requireCtrlKey = !m_ilz.requireCtrlKey;"/>
		<s:ToggleButton label="Zoom 100%" click="m_iw.setViewFullExtent()"/>
		<s:ToggleButton label="Pan (Shift)" selected="{!m_ilp.requireShiftKey}"
				click="m_ilz.requireCtrlKey = true; m_ilp.requireShiftKey = !m_ilp.requireShiftKey;"/>
		<s:Spacer width="10"/>
		<s:Label text="Projections:"/>
		<s:ToggleButton label="LatLon" selected="{m_iw.crs == 'EPSG:4326'}"
				click="m_iw.setCRSExtentAndViewBBox('EPSG:4326');"/>
		<s:ToggleButton label="Mercator" selected="{m_iw.crs == 'EPSG:ESRI'}"
				click="m_iw.setCRS('EPSG:ESRI', false); m_iw.setExtentBBoxRaw(0,-13000000,36000000,13000000);"/>
		<s:ToggleButton label="North Polar Stereo" selected="{m_iw.crs == 'ESRI:102018'}"
				click="m_iw.setCRS('ESRI:102018', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
		
		<s:ToggleButton label="Proj4:45 North Polar Stereo" selected="{m_iw.crs == 'PROJ4:proj=stere +lat_0=90 +lon_0=-45 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m'}"
				click="m_iw.setCRS('PROJ4:proj=stere +lat_0=90 +lon_0=-45 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
		
		<s:ToggleButton label="South Polar Stereo" selected="{m_iw.crs == 'ESRI:102021'}"
				click="m_iw.setCRS('ESRI:102021', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
		<s:ToggleButton label="Google Maps" selected="{m_iw.crs == 'EPSG:900913'}"
				click="m_iw.setCRSExtentAndViewBBox('EPSG:900913');"/>
		
		<s:Button label="Remove Surface Obs" click="removeLayer(event)" />
		
	</s:HGroup>
	
	
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="Displayed surface observations:"/>
		<s:CheckBox id="checkSYNOPs" label="SYNOPs" selected="true"
				change="m_layerSufraceObservations.setWMSDimensionValue('ShowSYNOPs', checkSYNOPs.selected ? 'yes' : 'no'); m_layerSufraceObservations.invalidateData(true);"/>
		<s:CheckBox id="checkMETARs" label="METARs" selected="true"
				change="m_layerSufraceObservations.setWMSDimensionValue('ShowMETARs', checkMETARs.selected ? 'yes' : 'no'); m_layerSufraceObservations.invalidateData(true);"/>
		<s:CheckBox id="checkBUOYs" label="BUOYs" selected="true"
				change="m_layerSufraceObservations.setWMSDimensionValue('ShowBUOYs', checkBUOYs.selected ? 'yes' : 'no'); m_layerSufraceObservations.invalidateData(true);"/>
		<s:Label text="Plot distance:"/>
		<s:HSlider id="sliderPlotDistance" liveDragging="false" minimum="10" value="200"
				maximum="500" change="onSurfaceObservationsPlotDensityChanged()"/>
		<s:Label text="[%]"/>
		<s:Spacer width="10"/>
		<s:Label id="labelLocation" text="[Mouse location]"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="middle">
		<s:CheckBox id="checkUseOpenStreetMap" label="Use Open Street Map if possible"
				selected="{mb_useOpenStreeMap}" change="onUseOpenStreetMapToggled()"/>
		<s:Label text="Alpha:"/>
		<s:HSlider id="sliderAlpha" liveDragging="true" minimum="0" value="1" maximum="1"
				snapInterval="0.1" change="m_openStreetLayer.alpha = sliderAlpha.value"/>
	</s:HGroup>
	
	<!-- InteractiveWidget -->
	<s:NavigatorContent width="100%" height="100%">
		<widgets:InteractiveWidget id="m_iw" width="100%" height="100%"
				mouseMove="onMouseMove(event)" zoomLevelChanged="onZoomLevelChanged(event)">
			
			<widgets:InteractiveLayerNorthIndicator zOrder="3"/>
			<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1" enabled="true" minimimMapScale="100000"/>
			<widgets:InteractiveLayerPan id="m_ilp" zOrder="2" enabled="true"/>
			
			<widgets:InteractiveLayerMap>
				
				<tiling:InteractiveLayerWMSWithQTT configuration="{lcqtBackground}" name="DEMBackground" zOrder="-10"/>
				
				<ogc:InteractiveLayerQTTMS id="m_openStreetLayer" name="OpenStreetMap" zOrder="-8" 
										   configuration="{qttmsConfig1}"
										   progress="onOpenStreetLayerProgress(event)" 
										   loadingStarted="onOpenStreetLayerLoadingStarted(event)"
										   loadingFinished="onOpenStreetLayerLoadingFinished(event)"/>
				
				<ogc:InteractiveLayerWMS id="m_layerSufraceObservations" configuration="{lcqtSurface}" name="Surface" zOrder="0" 
										 progress="onSurfaceObservationsLayerProgress(event)" 
										 loadingStarted="onSurfaceObservationsLayerLoadingStarted(event)"
										 loadingFinished="onSurfaceObservationsLayerLoadingFinished(event)"/>
				
				<tiling:InteractiveLayerWMSWithQTT configuration="{lcqtForeground}" name="Foreground" zOrder="9"/>
				
			</widgets:InteractiveLayerMap>
			
		</widgets:InteractiveWidget>
	</s:NavigatorContent>
	
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.FlexiWeatherConfiguration;
			import com.iblsoft.flexiweather.events.InteractiveLayerEvent;
			import com.iblsoft.flexiweather.events.InteractiveLayerProgressEvent;
			import com.iblsoft.flexiweather.events.InteractiveLayerQTTEvent;
			import com.iblsoft.flexiweather.net.loaders.AbstractURLLoader;
			import com.iblsoft.flexiweather.ogc.BBox;
			import com.iblsoft.flexiweather.ogc.CRSWithBBox;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerQTTMS;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerWMS;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.configuration.layers.QTTMSLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.managers.OGCServiceConfigurationManager;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerTiled;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
			import com.iblsoft.flexiweather.ogc.tiling.TiledTilesProvider;
			import com.iblsoft.flexiweather.ogc.tiling.TiledTilingInfo;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.proj.Projection;
			import com.iblsoft.flexiweather.widgets.BackgroundJobManager;
			import com.iblsoft.flexiweather.widgets.InteractiveDataLayer;
			import com.iblsoft.flexiweather.widgets.InteractiveLayer;
			import com.iblsoft.flexiweather.widgets.InteractiveLayerMap;
			import com.iblsoft.flexiweather.widgets.InteractiveLayerZoom;
			import com.iblsoft.flexiweather.widgets.LabelJobProgressIndicator;
			
			import mx.controls.Alert;
			
			import spark.filters.GlowFilter;
//			private var m_openStreetLayer: InteractiveLayerQTTMS;
//			private var m_layerDEMBackground: InteractiveLayerWMSWithQTT;
//			private var m_layerSufraceObservations: InteractiveLayerWMS;
//			private var m_layerForegroundBorders: InteractiveLayerWMSWithQTT;
			
			[Bindable]
			private var serviceRIA: WMSServiceConfiguration;
			[Bindable]
			private var serviceOBS: WMSServiceConfiguration;
			
			private function onCreationComplete(event: Event): void
			{
				WMSServiceConfiguration.PARSE_GET_CAPABILITIES = false;
				
				if (Capabilities.playerType == "Desktop")
					BackgroundJobManager.getInstance().m_progressBar = new LabelJobProgressIndicator(labelProgress);
				else
				{
					BackgroundJobManager.getInstance().createDefaultPreloader();
					BackgroundJobManager.getInstance().setupIndicator(hboxCaption);
				}
				m_iw.setCRSExtentAndViewBBox('EPSG:900913');
				
				var s_serverURL: String = 'http://ogcie.iblsoft.com';
				AbstractURLLoader.baseURL = s_serverURL;
				
				var scm: OGCServiceConfigurationManager =
					OGCServiceConfigurationManager.getInstance();
				
				serviceRIA = scm.getService(
					"ria",
					s_serverURL + "/ria", new Version(1, 3, 0),
					WMSServiceConfiguration) as WMSServiceConfiguration;
				
				serviceOBS = scm.getService(
					"obs",
					s_serverURL + "/observations?STATION_MODEL_ZOOM=0.9", new Version(1, 3, 0),
					WMSServiceConfiguration) as WMSServiceConfiguration;
				serviceOBS.updatePeriod = 5 * 60 * 1000;
				
				InteractiveLayerTiled.drawBorders = false;
				InteractiveLayerTiled.drawDebugText = false;
				//				InteractiveLayerTiled.drawBorders = true;
				//				InteractiveLayerTiled.drawDebugText = true;
				
				
//				initMapLayers();
				
				m_iw.setCRSExtentAndViewBBox(Projection.CRS_GEOGRAPHIC);
				
				Projection.addCRSByProj4("ESRI:54004", "+title=World Mercator +proj=merc +lat_ts=0 +lon_0=0 +k=1.000000 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102018", "+title=North Pole Stereographic +proj=stere +lat_0=90 +lon_0=-45 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("PROJ4:proj=stere +lat_0=90 +lon_0=-45 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m", "+proj=stere +lat_0=90 +lon_0=-45 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102021", "+title=South Pole Stereographic +proj=stere +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("EPSG:4326", "+title=WGS 84 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs", new BBox(-180, -90, 180, 90), true);
				
				if (FlexiWeatherConfiguration.FLEXI_WEATHER_LOADS_GET_CAPABILITIES)
					scm.update(scm.getAllServicesNames());
				
				
			}
			/*
			private function initMapLayers(): void
			{
				var map: InteractiveLayerMap = new InteractiveLayerMap();
				m_iw.addLayer(map);
				
				var lcqt: WMSWithQTTLayerConfiguration;
				lcqt = new WMSWithQTTLayerConfiguration(serviceRIA, ["background-dem"]);
				lcqt.label = "Backgrounds/DEM";
				
				m_layerDEMBackground = new InteractiveLayerWMSWithQTT(m_iw, lcqt);
				m_layerDEMBackground.setWMSStyleName(0, "white-colours");
				m_layerDEMBackground.name = 'DEMBackground';
				m_layerDEMBackground.zOrder = -10;
				m_iw.interactiveLayerMap.addLayer(m_layerDEMBackground);
				
				
				var openStreetConfiguration: QTTMSLayerConfiguration = new QTTMSLayerConfiguration();
				var openStreetTilingInfo: TiledTilingInfo = new TiledTilingInfo('http://b.tile.openstreetmap.org/%ZOOM%/%COL%/%ROW%.png', new CRSWithBBox('EPSG:900913', new BBox(-20037508.34, -20037508.34, 20037508.34, 20037508.34)));
				openStreetTilingInfo.minimumZoomLevel = 1;
				openStreetTilingInfo.maximumZoomLevel = 18;
				m_openStreetLayer = new InteractiveLayerQTTMS(m_iw, openStreetConfiguration);
				m_openStreetLayer.alpha = 1;
				m_openStreetLayer.name = 'OpenStreetMap';
				m_openStreetLayer.zOrder = -8;
				m_iw.interactiveLayerMap.addLayer(m_openStreetLayer);
				
				m_openStreetLayer.addEventListener(InteractiveDataLayer.PROGRESS, onOpenStreetLayerProgress);
				m_openStreetLayer.addEventListener(InteractiveDataLayer.LOADING_STARTED, onOpenStreetLayerLoadingStarted);
				m_openStreetLayer.addEventListener(InteractiveDataLayer.LOADING_FINISHED, onOpenStreetLayerLoadingFinished);
				
				var lc: WMSLayerConfiguration = new WMSLayerConfiguration(serviceOBS, ["surface"]);
				trace("Surface WMSLayerConfiguration: " + lc.id + " created");
				lc.label = "Surface observations";
				lc.autoRefreshPeriod = 30;
				
				m_layerSufraceObservations = new InteractiveLayerWMS(m_iw, lc);
				m_layerSufraceObservations.name = 'SurfaceObservations';
				m_layerSufraceObservations.zOrder = 0;
				m_layerSufraceObservations.filters = [new spark.filters.GlowFilter(0x80ffffff)];
				m_iw.interactiveLayerMap.addLayer(m_layerSufraceObservations);
				m_layerSufraceObservations.addEventListener(InteractiveDataLayer.PROGRESS, onSurfaceObservationsLayerProgress);
				m_layerSufraceObservations.addEventListener(InteractiveDataLayer.LOADING_STARTED, onSurfaceObservationsLayerLoadingStarted);
				m_layerSufraceObservations.addEventListener(InteractiveDataLayer.LOADING_FINISHED, onSurfaceObservationsLayerLoadingFinished);
				
				
				lcqt = new WMSWithQTTLayerConfiguration(serviceRIA, ["foreground-lines"]);
				lcqt.label = "Overlays/Border lines";
				m_layerForegroundBorders = new InteractiveLayerWMSWithQTT(m_iw, lcqt);
				m_layerForegroundBorders.name = 'Borders';
				m_layerForegroundBorders.zOrder = -1;
				m_iw.interactiveLayerMap.addLayer(m_layerForegroundBorders);
				
			}
			*/
			
			private function onLayerInitialized(event: InteractiveLayerEvent): void
			{
				var layer: InteractiveLayer = event.target as InteractiveLayer;
				m_iw.addLayer(layer);
				//				layer.refresh(true);
			}
			
			private function onOpenStreetLayerProgress(event: InteractiveLayerProgressEvent): void
			{
				qttProgress.setProgress(event.loaded, event.total);
			}
			
			private function onOpenStreetLayerLoadingStarted(event: InteractiveLayerEvent): void
			{
				trace("open street LOADING START");
			}
			
			private function onOpenStreetLayerLoadingFinished(event: InteractiveLayerEvent): void
			{
				trace("open street LOADING FINISHED");
				qttProgress.setProgress(1, 1);
			}
			
			private function onSurfaceObservationsLayerLoadingStarted(event: InteractiveLayerEvent): void
			{
				trace("surface observations LOADING START");
				surfaceProgress.setProgress(0, 1);
			}
			
			private function onSurfaceObservationsLayerLoadingFinished(event: InteractiveLayerEvent): void
			{
				//				trace("surface observations LOADING FINISHED");
				surfaceProgress.setProgress(1, 1);
			}
			
			private function onSurfaceObservationsLayerProgress(event: InteractiveLayerProgressEvent): void
			{
				surfaceProgress.setProgress(event.loaded, event.total);
				//				trace("onSurfaceObservationsLayer PROGRESS: " + event.loaded + " / " + event.total + " percent: " + surfaceProgress.percentComplete);
			}
			
			protected function onMouseMove(event: MouseEvent): void
			{
				labelLocation.text = "[" + event.localX + ", " + event.localY + "] = ";
				var c: Coord = m_iw.pointToCoord(event.localX, event.localY).toLaLoCoord();
				labelLocation.text += c != null ? c.toNiceString() : "?";
			}
			[Bindable]
			public var mb_useOpenStreeMap: Boolean = true;
			
			protected function onSurfaceObservationsPlotDensityChanged(): void
			{
				m_layerSufraceObservations.setWMSDimensionValue('PlotDistance', String(uint(sliderPlotDistance.value)));
				m_layerSufraceObservations.invalidateData(true);
			}
			
			protected function onUseOpenStreetMapToggled(): void
			{
				// TODO Auto-generated method stub
				mb_useOpenStreeMap = checkUseOpenStreetMap.selected;
				if (mb_useOpenStreeMap)
				{
					m_iw.addLayer(m_openStreetLayer);
					m_openStreetLayer.refresh(false);
				}
				else
					m_iw.removeLayer(m_openStreetLayer);
			}
			
			private function onZoomLevelChanged(event: InteractiveLayerQTTEvent): void
			{
				//				trace("new zoom level: " + event.zoomLevel);
			}
			
			private function removeLayer(event:MouseEvent):void 
			{ 
				m_iw.removeLayer(m_layerSufraceObservations); 
			}
			
		]]>
	</fx:Script>
	
</s:VGroup>