<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.

	 @see spark.skins.spark.TitleWindowCloseButtonSkin
	 @see spark.components.TitleWindow

	 @langversion 3.0
	 @playerversion Flash 10
	 @playerversion AIR 1.5
	 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" blendMode="normal" mouseEnabled="false"
		minWidth="76" minHeight="76" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5">
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadow" blurX="20" blurY="20" alpha="0.32" distance="11"
				angle="90" color="0x000000"/>
	</fx:Declarations>
	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("com.iblsoft.flexiweather.ogc.kml.controls.KMLInfoWindow")]
        ]]>
	</fx:Metadata>
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			/* Define the skin elements that should not be colorized.
			For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
			static private const exclusions: Array = ["background", "titleDisplay", "contentGroup","borderPath"];
			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			static private const exclusions_4_0: Array = ["background", "titleDisplay", "contentGroup"];

			/**
			 * @private
			 */
			override public function get colorizeExclusions(): Array
			{
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
					return exclusions_4_0;
				return exclusions;
			}

			/**
			 * @private
			 */
			override protected function initializationComplete(): void
			{
				useChromeColor = true;
				super.initializationComplete();
				filters = [dropShadow];
			}

			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth: Number, unscaledHeight: Number): void
			{
//				border.visible = true;
				var borderVisible: Boolean = false;
				if (getStyle("borderVisible") == true)
				{
					borderVisible = true;
				}
				
				borderPath.visible = borderVisible;
				arrowBorder.visible = borderVisible;
				
				background.left = background.top = background.right = 0;
				background.bottom = hostComponent.contentBottom;
				contents.left = contents.top = contents.right = 0;
				contents.bottom = hostComponent.contentBottom;
				
				
				var cr: Number = getStyle("cornerRadius");
				var withControls: Boolean =
						(currentState == "disabledWithControlBar" ||
						currentState == "normalWithControlBar" ||
						currentState == "inactiveWithControlBar");
				if (cornerRadius != cr)
				{
					cornerRadius = cr;
					setPartCornerRadii(background, withControls);
				}
				arrowStroke.color = getStyle("borderColor");
				arrowStroke.alpha = getStyle("borderAlpha");
				borderPathStroke.color = getStyle("borderColor");
				borderPathStroke.alpha = getStyle("borderAlpha");
				backgroundFill.color = 0xcccccc; //getStyle("backgroundColor");
				backgroundFill.alpha = getStyle("backgroundAlpha");
				backgroundArrowFill.color = 0xcccccc; //getStyle("backgroundColor");
				backgroundArrowFill.alpha = getStyle("backgroundAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			/**
			 * @private
			 */
			private function setPartCornerRadii(target: Rect, includeBottom: Boolean): void
			{
				target.topLeftRadiusX = cornerRadius;
				target.topRightRadiusX = cornerRadius;
				target.bottomLeftRadiusX = includeBottom ? cornerRadius : 0;
				target.bottomRightRadiusX = includeBottom ? cornerRadius : 0;
			}
			private var cornerRadius: Number;
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="inactive" stateGroups="inactiveGroup"/>
		<s:State name="disabled"/>
		<s:State name="normalWithControlBar" stateGroups="withControls"/>
		<s:State name="inactiveWithControlBar" stateGroups="withControls, inactiveGroup"/>
		<s:State name="disabledWithControlBar" stateGroups="withControls"/>
	</s:states>

	<!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->

	<!--- drop shadow can't be hittable so all other graphics go in this group -->
	<s:Group left="0" right="0" top="0" bottom="0">

<!--		<s:Rect id="border" left="0" right="0" top="0" bottom="{hostComponent.contentBottom}">
			<s:stroke>
				<s:SolidColorStroke id="borderStroke" weight="1"/>
			</s:stroke>
		</s:Rect>-->

		<!-- layer 2: background fill -->

		<!--- Defines the appearance of the TitleWindowSkin class's background. -->
		<s:Rect id="background" left="0" top="0" right="0" bottom="{hostComponent.contentBottom}">
			<s:fill>
				<s:SolidColor id="backgroundFill" color="#FFFFFF" alpha="0.2"/>
			</s:fill>
		</s:Rect>

		<!-- bottom arrow -->
		<s:Graphic id="arrow"  
				   left="{hostComponent.arrowX}"
				   top="{hostComponent.arrowY}" 
				   width="{hostComponent.arrowWidth}"
					height="{hostComponent.arrowHeight}">
			
			<s:Path data="{hostComponent.arrowPath}">
				<s:fill>
					<s:SolidColor id="backgroundArrowFill"/>
				</s:fill>
			</s:Path>
		</s:Graphic>

		<!-- layer 3: contents -->

		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group left="1" right="1" top="1" bottom="{hostComponent.contentBottom + 1}" id="contents">
			<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="justify"/>
			</s:layout>

			<!--- @private -->
			<s:Group id="topGroup">


			</s:Group>

			<!--
				Note: setting the minimum size to 0 here so that changes to the host component's
				size will not be thwarted by this skin part's minimum size.   This is a compromise,
				more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->

			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup"  width="100%" height="100%"  minWidth="0" minHeight="0">
			</s:Group>

			<!--- @private -->
			<s:Group id="bottomGroup" minWidth="0" minHeight="0" includeIn="withControls">
				<s:Group left="0" right="0" top="0" bottom="{hostComponent.contentBottom}">

					<!-- layer 0: control bar divider line -->
					<s:Rect left="0" right="0" top="0" height="1" alpha="0.22">
						<s:fill>
							<s:SolidColor color="0x000000"/>
						</s:fill>
					</s:Rect>

					<!-- layer 1: control bar highlight -->
					<s:Rect left="0" right="0" top="1" bottom="0">
						<s:stroke>
							<s:LinearGradientStroke rotation="90" weight="1">
								<s:GradientEntry color="0xFFFFFF"/>
								<s:GradientEntry color="0xD8D8D8"/>
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>

					<!-- layer 2: control bar fill -->
					<s:Rect left="1" right="1" top="2" bottom="1">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0xEDEDED"/>
								<s:GradientEntry color="0xCDCDCD"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
				</s:Group>

				<!--- @copy spark.components.Panel#controlBarGroup -->
				<s:Group id="controlBarGroup" left="0" right="0" top="1" bottom="{hostComponent.contentBottom + 1}" minWidth="0"
						minHeight="0">
					<s:layout>
						<s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="7"
								paddingBottom="7" gap="10"/>
					</s:layout>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<!-- border path -->
		<s:Graphic id="borderPath" left="0" right="0" top="0">
			<s:Path data="{hostComponent.borderPath}">
				<s:stroke>
					<s:SolidColorStroke id="borderPathStroke" weight="1"/>
				</s:stroke>
			</s:Path>
		</s:Graphic>
		
		<!-- arrow border -->
		<s:Graphic id="arrowBorder" 
				   left="{hostComponent.arrowX}"
				   top="{hostComponent.arrowY}"
				width="{hostComponent.arrowWidth}" height="{hostComponent.arrowHeight}">
			<s:Path data="{hostComponent.arrowBorderPath}">
				<s:stroke>
					<s:SolidColorStroke id="arrowStroke" weight="1"/>
				</s:stroke>
			</s:Path>
		</s:Graphic>
	</s:Group>
</s:SparkSkin>
